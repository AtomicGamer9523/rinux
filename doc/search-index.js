var searchIndex = JSON.parse('{\
"bit_field":{"doc":"Provides the abstraction of a bit field, which allows for …","t":[18,8,8,10,10,10,10,10,10,10,10,10],"n":["BIT_LENGTH","BitArray","BitField","bit_length","get_bit","get_bit","get_bits","get_bits","set_bit","set_bit","set_bits","set_bits"],"q":["bit_field","","","","","","","","","","",""],"d":["The number of bits in this bit field.","","A generic trait which provides methods for extracting and …","Returns the length, eg number of bits, in this bit array.","Obtains the bit at the index <code>bit</code>; note that index 0 is the …","Obtains the bit at the index <code>bit</code>; note that index 0 is the …","Obtains the range of bits specified by <code>range</code>; note that …","Obtains the range of bits specified by <code>range</code>; note that …","Sets the bit at the index <code>bit</code> to the value <code>value</code> (where …","Sets the bit at the index <code>bit</code> to the value <code>value</code> (where …","Sets the range of bits defined by the range <code>range</code> to the …","Sets the range of bits defined by the range <code>range</code> to the …"],"i":[1,0,0,2,1,2,1,2,1,2,1,2],"f":[null,null,null,[[["",0]],["usize",0]],[[["",0],["usize",0]],["bool",0]],[[["",0],["usize",0]],["bool",0]],[[["",0],["rangebounds",8,[["usize",0]]]]],[[["",0],["rangebounds",8,[["usize",0]]]]],[[["",0],["usize",0],["bool",0]],["",0]],[[["",0],["usize",0],["bool",0]]],[[["",0],["rangebounds",8,[["usize",0]]]],["",0]],[[["",0],["rangebounds",8,[["usize",0]]]]]],"p":[[8,"BitField"],[8,"BitArray"]]},\
"enderpearl":{"doc":"","t":[3,3,3,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Command","EnderPearl","Operation","_customTokenize","_useCustomRunner","_useCustomRunner","_useCustomRunner","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","command","fmt","fmt","fmt","from","from","from","into","into","into","name","new","parse","run","run","run","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["enderpearl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Command Structure","Enderpearl structure includes a vector of Operations","Operation Structure includes a name and a vector of …","Uses the enderpearl tokenizer to tokenize content","Uses a custom runner to run the command","Custom run function for the operation","Uses custom runner to run enderpearl (still uses default …","","","","","","","","","","","","","The command to be run","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new plain Enderpearl Structure","parses two string using the built-in parser","Default run function <strong>WARNING</strong> not yet implemented","Default run function","Runs using default runner","","","","","","","","","","","",""],"i":[0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,1,2,3,1,2,3,1,2,3,2,3,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3],"f":[null,null,null,[[["string",3]],["vec",3]],[[["command",3],["bool",0],["fnmut",8]]],[[["operation",3],["bool",0],["fnmut",8]]],[[["enderpearl",3],["fnmut",8]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["command",3]],["command",3]],[[["operation",3]],["operation",3]],[[["enderpearl",3]],["enderpearl",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[["command",3],["formatter",3]],["result",6]],[[["operation",3],["formatter",3]],["result",6]],[[["enderpearl",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["bool",0]],["enderpearl",3]],[[["enderpearl",3],["string",3],["string",3]],["enderpearl",3]],[[["command",3],["bool",0]]],[[["operation",3],["bool",0]]],[[["enderpearl",3],["string",3]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"Command"],[3,"Operation"],[3,"EnderPearl"]]},\
"lazy_static":{"doc":"A macro for declaring lazily evaluated statics. Using this …","t":[8,5,0,14,18,3,11,11,11,11,11,11,11,11],"n":["LazyStatic","initialize","lazy","lazy_static","INIT","Lazy","borrow","borrow_mut","from","get","into","try_from","try_into","type_id"],"q":["lazy_static","","","","lazy_static::lazy","","","","","","","","",""],"d":["Support trait for enabling a few common operation on lazy …","Takes a shared reference to a lazy static and initializes …","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","",""],"i":[0,0,0,0,1,0,1,1,1,1,1,1,1,1],"f":[null,[[["",0]]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[["lazy",3,[["sync",8]]]],["",0]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"Lazy"]]},\
"rinuxcore":{"doc":"Rinux","t":[3,4,13,13,13,4,13,8,0,11,11,11,11,11,11,11,11,11,11,0,2,11,5,11,11,11,11,11,11,0,5,5,0,11,11,11,14,0,12,12,14,14,14,10,0,14,14,5,0,5,5,11,11,11,11,11,11,11,11,11,11,11,11,2,12,3,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,12,3,11,11,0,11,11,0,11,0,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,5,11,11,11,5,11,11,11,3,11,11,11,11,11,11,11,11,11,11],"n":["BootInfo","ConfigType","Custom","Failed","File","QemuExitCode","Success","Testable","allocator","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","conf","epearl","eq","exit_qemu","fmt","fmt","fmt","from","from","from","gdt","hlt_loop","init","interrupts","into","into","into","kernel","memory","memory_map","physical_memory_offset","print","print_err","println","run","serial","serial_print","serial_println","set_config_type","task","test_panic_handler","test_runner","tls_template","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","x86_64","0","Config","ConfigType","File","UserDefined","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cnst","default","fmt","from","from","into","into","new","project_name","project_version","quiet_boot","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","0","Task","borrow","borrow_mut","executor","from","into","keyboard","new","simple_executor","try_from","try_into","type_id","Executor","borrow","borrow_mut","from","into","new","run","spawn","try_from","try_into","type_id","ScancodeStream","borrow","borrow_mut","from","init","into","new","poll_next","print_keypresses","try_from","try_into","type_id","SimpleExecutor","borrow","borrow_mut","from","into","new","run","spawn","try_from","try_into","type_id"],"q":["rinuxcore","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rinuxcore::ConfigType","rinuxcore::conf","","","","","","","","","","","","","","","","","","","","","","","","","","","","rinuxcore::conf::ConfigType","rinuxcore::task","","","","","","","","","","","","rinuxcore::task::executor","","","","","","","","","","","rinuxcore::task::keyboard","","","","","","","","","","","","rinuxcore::task::simple_executor","","","","","","","","","",""],"d":["This structure represents the information that the …","Enum for Configuration Data Specification","","","","Enum For Qemu Exit codes, sometimes useful","","Useful for testing","","","","","","","","","","","","","","","Quits Qemu using certain exit code","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Loop used to just do nothing","Initializes the core of Rinux","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","A map of the physical memory regions of the underlying …","The offset into the virtual address space where the …","","","","","","","","Used for setting source for rinux to get it’s config from","","It’s in its name","Runs Tests","Returns information about the thread local storage segment …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,1,2,1,0,2,0,0,3,1,2,3,1,2,1,2,1,2,0,0,2,0,3,1,2,3,1,2,0,0,0,0,3,1,2,0,0,3,3,0,0,0,4,0,0,0,0,0,0,0,3,1,2,3,1,2,3,1,2,3,1,2,0,5,0,0,6,6,6,7,6,7,7,7,7,7,7,6,7,6,7,7,7,7,7,7,6,7,6,7,6,7,8,0,9,9,0,9,9,0,9,0,9,9,9,0,10,10,10,10,10,10,10,10,10,10,0,11,11,11,0,11,11,11,0,11,11,11,0,12,12,12,12,12,12,12,12,12,12],"f":[null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["configtype",4]],["configtype",4]],[[["qemuexitcode",4]],["qemuexitcode",4]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,[[["qemuexitcode",4],["qemuexitcode",4]],["bool",0]],[[["qemuexitcode",4]]],[[["bootinfo",3],["formatter",3]],["result",4,[["error",3]]]],[[["configtype",4],["formatter",3]],["result",6]],[[["qemuexitcode",4],["formatter",3]],["result",6]],[[]],[[]],[[]],null,[[],["never",0]],[[["bootinfo",3]]],null,[[]],[[]],[[]],null,null,null,null,null,null,null,[[["",0]]],null,null,null,[[["configtype",4]]],null,[[["panicinfo",3]],["never",0]],[[]],[[["bootinfo",3]],["option",4,[["tlstemplate",3]]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["config",3]],["config",3]],[[["",0],["",0]]],[[],["config",3]],[[],["config",3]],[[["config",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["str",0],["str",0],["bool",0]],["config",3]],null,null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[]],[[]],null,[[["future",8]],["task",3]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[],["executor",3]],[[["executor",3]],["never",0]],[[["executor",3],["task",3]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[],["future",8]],[[]],[[],["scancodestream",3]],[[["pin",3,[["scancodestream",3]]],["context",3]],["poll",4,[["option",4,[["u8",0]]]]]],[[],["future",8]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[],["simpleexecutor",3]],[[["simpleexecutor",3]]],[[["simpleexecutor",3],["task",3]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[4,"ConfigType"],[4,"QemuExitCode"],[3,"BootInfo"],[8,"Testable"],[13,"Custom"],[4,"ConfigType"],[3,"Config"],[13,"UserDefined"],[3,"Task"],[3,"Executor"],[3,"ScancodeStream"],[3,"SimpleExecutor"]]},\
"spin":{"doc":"This crate provides spin-based versions of the primitives …","t":[6,6,6,2,6,2,6,2,6,6,2,0,0,0,0,0,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6,6,6,6,3,3,2,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,3,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Barrier","Lazy","Mutex","MutexGuard","Once","RelaxStrategy","RwLock","RwLockReadGuard","RwLockUpgradableGuard","RwLockWriteGuard","Spin","barrier","lazy","lock_api","mutex","once","relax","rwlock","Barrier","BarrierWaitResult","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","is_leader","new","try_from","try_from","try_into","try_into","type_id","type_id","wait","Lazy","as_mut_ptr","borrow","borrow_mut","default","deref","fmt","force","from","into","new","try_from","try_into","type_id","Mutex","MutexGuard","RwLock","RwLockReadGuard","RwLockUpgradableReadGuard","RwLockWriteGuard","Mutex","MutexGuard","SpinMutex","SpinMutexGuard","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref_mut","fmt","fmt","fmt","force_unlock","from","from","from","from","get_mut","into","into","into_inner","is_locked","is_locked","leak","lock","lock","new","spin","try_from","try_from","try_into","try_into","try_lock","try_lock","type_id","type_id","unlock","SpinMutex","SpinMutexGuard","as_mut_ptr","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref_mut","drop","fmt","fmt","fmt","force_unlock","from","from","from","from","get_mut","into","into","into_inner","is_locked","is_locked","leak","lock","lock","new","try_from","try_from","try_into","try_into","try_lock","try_lock","type_id","type_id","unlock","INIT","Once","as_mut_ptr","borrow","borrow_mut","call_once","default","drop","fmt","from","from","from","get","get_mut","get_unchecked","initialized","into","is_completed","new","poll","try_call_once","try_from","try_into","try_into_inner","type_id","wait","Loop","RelaxStrategy","Spin","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","relax","relax","relax","try_from","try_from","try_into","try_into","type_id","type_id","RwLock","RwLockReadGuard","RwLockUpgradableGuard","RwLockWriteGuard","as_mut_ptr","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","deref","deref","deref","deref_mut","downgrade","downgrade","downgrade","downgrade_to_upgradeable","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_read_decrement","force_write_unlock","from","from","from","from","from","from","get_mut","into","into","into","into","into_inner","is_locked","leak","leak","leak","lock_exclusive","lock_shared","lock_upgradable","new","read","reader_count","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_lock_exclusive","try_lock_shared","try_lock_upgradable","try_read","try_upgrade","try_upgrade","try_upgradeable_read","try_write","type_id","type_id","type_id","type_id","unlock_exclusive","unlock_shared","unlock_upgradable","upgrade","upgrade","upgradeable_read","write","writer_count"],"q":["spin","","","","","","","","","","","","","","","","","","spin::barrier","","","","","","","","","","","","","","","","","","","spin::lazy","","","","","","","","","","","","","","spin::lock_api","","","","","","spin::mutex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","spin::mutex::spin","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","spin::once","","","","","","","","","","","","","","","","","","","","","","","","","","spin::relax","","","","","","","","","","","","","","","","","","","","spin::rwlock","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A primitive that synchronizes the execution of multiple …","A value which is initialized on the first access. See …","A primitive that synchronizes the execution of multiple …","","A primitive that provides lazy one-time initialization. …","","A lock that provides data access to either one writer or …","","A guard that provides immutable data access but can be …","A guard that provides mutable data access. See …","","Synchronization primitive allowing multiple threads to …","Synchronization primitives for lazy evaluation.","Spin synchronisation primitives, but compatible with …","Locks that have the same behaviour as a mutex.","Synchronization primitives for one-time evaluation.","Strategies that determine the behaviour of locks when …","A lock that provides data access to either one writer or …","A primitive that synchronizes the execution of multiple …","A <code>BarrierWaitResult</code> is returned by <code>wait</code> when all threads …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether this thread from <code>wait</code> is the “leader …","Creates a new barrier that can block a given number of …","","","","","","","Blocks the current thread until all threads have …","A value which is initialized on the first access.","Retrieves a mutable pointer to the inner data.","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","Forces the evaluation of this lazy value and returns a …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new lazy value with the given initializing …","","","","A lock that provides mutually exclusive data access …","A guard that provides mutable data access (compatible with …","A lock that provides data access to either one writer or …","A guard that provides immutable data access (compatible …","A guard that provides immutable data access but can be …","A guard that provides mutable data access (compatible with …","A spin-based lock providing mutually exclusive access to …","A generic guard that will protect some data access and …","","","","","","","","","","","","","Force unlock this <code>Mutex</code>.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>Mutex</code> and unwraps the underlying data.","","Returns <code>true</code> if the lock is currently held.","Leak the lock guard, yielding a mutable reference to the …","Locks the <code>Mutex</code> and returns a guard that permits access to …","","Creates a new <code>Mutex</code> wrapping the supplied data.","A naïve spinning mutex.","","","","","","Try to lock this <code>Mutex</code>, returning a lock guard if …","","","","A spin lock providing mutually exclusive access to data.","A guard that provides mutable data access.","Returns a mutable pointer to the underlying data.","","","","","","","","The dropping of the MutexGuard will release the lock it …","","","","Force unlock this <code>SpinMutex</code>.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>SpinMutex</code> and unwraps the underlying data.","Returns <code>true</code> if the lock is currently held.","","Leak the lock guard, yielding a mutable reference to the …","","Locks the <code>SpinMutex</code> and returns a guard that permits …","Creates a new <code>SpinMutex</code> wrapping the supplied data.","","","","","Try to lock this <code>SpinMutex</code>, returning a lock guard if …","","","","","Initialization constant of <code>Once</code>.","A primitive that provides lazy one-time initialization.","Retrieve a pointer to the inner data.","","","Performs an initialization routine once and only once. The …","","","","Returns the argument unchanged.","","","Returns a reference to the inner value if the <code>Once</code> has …","Returns a mutable reference to the inner value if the <code>Once</code> …","Returns a reference to the inner value on the unchecked …","Creates a new initialized <code>Once</code>.","Calls <code>U::from(self)</code>.","Checks whether the value has been initialized.","Creates a new <code>Once</code>.","Like <code>Once::get</code>, but will spin if the <code>Once</code> is in the …","This method is similar to <code>call_once</code>, but allows the given …","","","Returns a the inner value if the <code>Once</code> has been initialized.","","Spins until the <code>Once</code> contains a value.","A strategy that rapidly spins, without telling the CPU to …","A trait implemented by spinning relax strategies.","A strategy that rapidly spins while informing the CPU that …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Perform the relaxing operation during a period of …","","","","","","","","","A lock that provides data access to either one writer or …","A guard that provides immutable data access.","A guard that provides immutable data access but can be …","A guard that provides mutable data access.","Returns a mutable pointer to the underying data.","","","","","","","","","","","","","","","Downgrades the writable lock guard to a readable, shared …","Downgrades the upgradeable lock guard to a readable, …","Downgrades the writable lock guard to an upgradable, …","","","","","","","","","","","Force decrement the reader count.","Force unlock exclusive write access.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>RwLock</code>, returning the underlying data.","","Leak the lock guard, yielding a reference to the …","Leak the lock guard, yielding a mutable reference to the …","Leak the lock guard, yielding a reference to the …","","","","Creates a new spinlock wrapping the supplied data.","Locks this rwlock with shared read access, blocking the …","Return the number of readers that currently hold the lock …","","","","","","","","","","","","Attempt to acquire this lock with shared read access.","","Tries to upgrade an upgradeable lock guard to a writable …","Tries to obtain an upgradeable lock guard.","Attempt to lock this rwlock with exclusive write access.","","","","","","","","","Upgrades an upgradeable lock guard to a writable lock …","Obtain a readable lock guard that can later be upgraded to …","Lock this rwlock with exclusive write access, blocking the …","Return the number of writers that currently hold the lock."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,2,1,1,2,1,2,1,2,1,0,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,4,5,4,5,4,5,5,4,5,5,4,4,4,4,5,4,4,5,4,4,4,5,4,4,4,0,4,5,4,5,4,4,4,5,4,0,0,6,6,7,6,7,6,7,7,7,6,7,7,6,6,6,6,7,6,6,7,6,6,6,7,6,6,6,6,7,6,7,6,6,6,7,6,8,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,9,10,9,10,9,10,9,10,11,9,10,9,10,9,10,9,10,0,0,0,0,12,12,13,14,15,12,13,14,15,12,13,14,15,14,12,14,15,14,13,14,15,12,13,13,14,14,15,15,12,12,12,12,12,13,14,15,12,12,13,14,15,12,12,13,14,15,12,12,12,12,12,12,12,13,14,15,12,13,14,15,12,12,12,12,12,15,12,12,12,13,14,15,12,12,12,12,15,12,12,12],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[]],[[["barrierwaitresult",3]],["bool",0]],[[["usize",0]],["barrier",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["barrier",3,[["relaxstrategy",8]]]],["barrierwaitresult",3]],null,[[["lazy",3]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["lazy",3,[["default",8]]]],[[["lazy",3,[["fnonce",8],["relaxstrategy",8]]]],["",0]],[[["lazy",3,[["debug",8]]],["formatter",3]],["result",6]],[[["lazy",3,[["fnonce",8],["relaxstrategy",8]]]],["",0]],[[]],[[]],[[],["lazy",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["mutex",3,[["",26,[["sized",8],["default",8]]]]]],[[["mutexguard",3,[["sized",8]]]],["",0]],[[["mutexguard",3,[["sized",8]]]],["",0]],[[["mutex",3,[["",26,[["sized",8],["debug",8]]]]],["formatter",3]],["result",6]],[[["mutexguard",3,[["",26,[["sized",8],["display",8]]]]],["formatter",3]],["result",6]],[[["mutexguard",3,[["",26,[["sized",8],["debug",8]]]]],["formatter",3]],["result",6]],[[["mutex",3,[["sized",8]]]]],[[],["mutex",3]],[[]],[[["never",0]]],[[]],[[["mutex",3,[["sized",8]]]],["",0]],[[]],[[]],[[["mutex",3]]],[[["mutex",3,[["relaxstrategy",8]]]],["bool",0]],[[["mutex",3,[["sized",8]]]],["bool",0]],[[["mutexguard",3,[["sized",8]]]],["",0]],[[["mutex",3,[["sized",8],["relaxstrategy",8]]]],["mutexguard",3,[["sized",8]]]],[[["mutex",3,[["relaxstrategy",8]]]]],[[],["mutex",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["mutex",3,[["relaxstrategy",8]]]],["bool",0]],[[["mutex",3,[["sized",8]]]],["option",4,[["mutexguard",3,[["sized",8]]]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["mutex",3,[["relaxstrategy",8]]]]],null,null,[[["spinmutex",3]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["spinmutex",3,[["",26,[["sized",8],["default",8]]]]]],[[["spinmutexguard",3,[["sized",8]]]],["",0]],[[["spinmutexguard",3,[["sized",8]]]],["",0]],[[["spinmutexguard",3,[["sized",8]]]]],[[["spinmutex",3,[["",26,[["sized",8],["debug",8]]]]],["formatter",3]],["result",6]],[[["spinmutexguard",3,[["",26,[["sized",8],["debug",8]]]]],["formatter",3]],["result",6]],[[["spinmutexguard",3,[["",26,[["sized",8],["display",8]]]]],["formatter",3]],["result",6]],[[["spinmutex",3,[["sized",8]]]]],[[["never",0]]],[[]],[[],["spinmutex",3]],[[]],[[["spinmutex",3,[["sized",8]]]],["",0]],[[]],[[]],[[["spinmutex",3]]],[[["spinmutex",3,[["sized",8]]]],["bool",0]],[[["spinmutex",3,[["relaxstrategy",8]]]],["bool",0]],[[["spinmutexguard",3,[["sized",8]]]],["",0]],[[["spinmutex",3,[["relaxstrategy",8]]]]],[[["spinmutex",3,[["sized",8],["relaxstrategy",8]]]],["spinmutexguard",3,[["sized",8]]]],[[],["spinmutex",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["spinmutex",3,[["sized",8]]]],["option",4,[["spinmutexguard",3,[["sized",8]]]]]],[[["spinmutex",3,[["relaxstrategy",8]]]],["bool",0]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["spinmutex",3,[["relaxstrategy",8]]]]],null,null,[[["once",3]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["once",3,[["relaxstrategy",8]]],["fnonce",8]],["",0]],[[],["once",3]],[[["once",3]]],[[["once",3,[["debug",8]]],["formatter",3]],["result",6]],[[]],[[["never",0]]],[[],["once",3]],[[["once",3]],["option",4]],[[["once",3]],["option",4]],[[["once",3]],["",0]],[[],["once",3]],[[]],[[["once",3]],["bool",0]],[[],["once",3]],[[["once",3,[["relaxstrategy",8]]]],["option",4]],[[["once",3,[["relaxstrategy",8]]],["fnonce",8]],["result",4]],[[],["result",4]],[[],["result",4]],[[["once",3]],["option",4]],[[["",0]],["typeid",3]],[[["once",3,[["relaxstrategy",8]]]],["",0]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,[[["rwlock",3]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["rwlock",3,[["",26,[["sized",8],["default",8]]]]]],[[["rwlockreadguard",3,[["sized",8]]]],["",0]],[[["rwlockwriteguard",3,[["sized",8]]]],["",0]],[[["rwlockupgradableguard",3,[["sized",8]]]],["",0]],[[["rwlockwriteguard",3,[["sized",8]]]],["",0]],[[["rwlock",3,[["relaxstrategy",8]]]]],[[["rwlockwriteguard",3,[["sized",8]]]],["rwlockreadguard",3,[["sized",8]]]],[[["rwlockupgradableguard",3,[["sized",8]]]],["rwlockreadguard",3,[["sized",8]]]],[[["rwlockwriteguard",3,[["sized",8]]]],["rwlockupgradableguard",3,[["sized",8]]]],[[["rwlockreadguard",3,[["sized",8]]]]],[[["rwlockwriteguard",3,[["sized",8]]]]],[[["rwlockupgradableguard",3,[["sized",8]]]]],[[["rwlock",3,[["",26,[["sized",8],["debug",8]]]]],["formatter",3]],["result",6]],[[["rwlockreadguard",3,[["",26,[["sized",8],["display",8]]]]],["formatter",3]],["result",6]],[[["rwlockreadguard",3,[["",26,[["sized",8],["debug",8]]]]],["formatter",3]],["result",6]],[[["rwlockwriteguard",3,[["",26,[["sized",8],["display",8]]]]],["formatter",3]],["result",6]],[[["rwlockwriteguard",3,[["",26,[["sized",8],["debug",8]]]]],["formatter",3]],["result",6]],[[["rwlockupgradableguard",3,[["",26,[["sized",8],["debug",8]]]]],["formatter",3]],["result",6]],[[["rwlockupgradableguard",3,[["",26,[["sized",8],["display",8]]]]],["formatter",3]],["result",6]],[[["rwlock",3,[["sized",8]]]]],[[["rwlock",3,[["sized",8]]]]],[[["never",0]]],[[],["rwlock",3]],[[]],[[]],[[]],[[]],[[["rwlock",3,[["sized",8]]]],["",0]],[[]],[[]],[[]],[[]],[[["rwlock",3]]],[[["rwlock",3,[["relaxstrategy",8]]]],["bool",0]],[[["rwlockreadguard",3,[["sized",8]]]],["",0]],[[["rwlockwriteguard",3,[["sized",8]]]],["",0]],[[["rwlockupgradableguard",3,[["sized",8]]]],["",0]],[[["rwlock",3,[["relaxstrategy",8]]]]],[[["rwlock",3,[["relaxstrategy",8]]]]],[[["rwlock",3,[["relaxstrategy",8]]]]],[[],["rwlock",3]],[[["rwlock",3,[["sized",8],["relaxstrategy",8]]]],["rwlockreadguard",3,[["sized",8]]]],[[["rwlock",3,[["sized",8]]]],["usize",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["rwlock",3,[["relaxstrategy",8]]]],["bool",0]],[[["rwlock",3,[["relaxstrategy",8]]]],["bool",0]],[[["rwlock",3,[["relaxstrategy",8]]]],["bool",0]],[[["rwlock",3,[["sized",8]]]],["option",4,[["rwlockreadguard",3,[["sized",8]]]]]],[[["rwlock",3,[["relaxstrategy",8]]]],["bool",0]],[[["rwlockupgradableguard",3,[["sized",8]]]],["result",4,[["rwlockwriteguard",3,[["sized",8]]],["rwlockupgradableguard",3,[["sized",8]]]]]],[[["rwlock",3,[["sized",8]]]],["option",4,[["rwlockupgradableguard",3,[["sized",8]]]]]],[[["rwlock",3,[["sized",8]]]],["option",4,[["rwlockwriteguard",3,[["sized",8]]]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["rwlock",3,[["relaxstrategy",8]]]]],[[["rwlock",3,[["relaxstrategy",8]]]]],[[["rwlock",3,[["relaxstrategy",8]]]]],[[["rwlock",3,[["relaxstrategy",8]]]]],[[["rwlockupgradableguard",3,[["sized",8],["relaxstrategy",8]]]],["rwlockwriteguard",3,[["sized",8],["relaxstrategy",8]]]],[[["rwlock",3,[["sized",8],["relaxstrategy",8]]]],["rwlockupgradableguard",3,[["sized",8],["relaxstrategy",8]]]],[[["rwlock",3,[["sized",8],["relaxstrategy",8]]]],["rwlockwriteguard",3,[["sized",8],["relaxstrategy",8]]]],[[["rwlock",3,[["sized",8]]]],["usize",0]]],"p":[[3,"Barrier"],[3,"BarrierWaitResult"],[3,"Lazy"],[3,"Mutex"],[3,"MutexGuard"],[3,"SpinMutex"],[3,"SpinMutexGuard"],[3,"Once"],[3,"Spin"],[3,"Loop"],[8,"RelaxStrategy"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"RwLockUpgradableGuard"]]},\
"uart_16550":{"doc":"Minimal support for serial communication through UART …","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["MmioSerialPort","SerialPort","borrow","borrow","borrow_mut","borrow_mut","from","from","init","init","into","into","new","new","receive","receive","send","send","send_raw","try_from","try_from","try_into","try_into","type_id","type_id","write_str","write_str"],"q":["uart_16550","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A memory-mapped UART.","A port-mapped UART.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Initializes the memory-mapped UART.","Initializes the serial port.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new UART interface on the given memory mapped …","Creates a new serial port interface on the given I/O port.","Receives a byte on the serial port.","Receives a byte on the serial port.","Sends a byte on the serial port.","Sends a byte on the serial port.","Sends a raw byte on the serial port, intended for binary …","","","","","","","",""],"i":[0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2,1,2],"f":[null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["mmioserialport",3]]],[[["serialport",3]]],[[]],[[]],[[["usize",0]],["mmioserialport",3]],[[["u16",0]],["serialport",3]],[[["mmioserialport",3]],["u8",0]],[[["serialport",3]],["u8",0]],[[["mmioserialport",3],["u8",0]]],[[["serialport",3],["u8",0]]],[[["serialport",3],["u8",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["mmioserialport",3],["str",0]],["result",6]],[[["serialport",3],["str",0]],["result",6]]],"p":[[3,"MmioSerialPort"],[3,"SerialPort"]]},\
"vga_buffer":{"doc":"","t":[13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,8,3,13,11,11,11,11,11,11,11,0,11,11,11,11,11,14,14,14,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,4,3,8,13,8,14,3,3,3,3,3,8,3,3,13,8,8,8,8,6,13,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,10,11,11],"n":["Black","Blue","Brown","Color","Cyan","DarkGray","Green","LightBlue","LightCyan","LightGray","LightGreen","LightRed","Magenta","Pink","Red","White","Write","Writer","Yellow","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","fmt","from","from","into","into","print","print_err","print_info","print_ok","println","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write_byte","write_char","write_char","write_char","write_fmt","write_fmt","write_fmt","write_str","write_str","Alignment","Arguments","Binary","Center","Debug","Debug","DebugList","DebugMap","DebugSet","DebugStruct","DebugTuple","Display","Error","Formatter","Left","LowerExp","LowerHex","Octal","Pointer","Result","Right","UpperExp","UpperHex","Write","align","alternate","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","debug_list","debug_map","debug_set","debug_struct","debug_tuple","default","entries","entries","entries","entry","entry","entry","eq","eq","field","field","fill","finish","finish","finish","finish","finish","finish_non_exhaustive","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","hash","into","into","into","into","into","into","into","into","into","key","pad","pad_integral","partial_cmp","precision","sign_aware_zero_pad","sign_minus","sign_plus","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","width","write","write_char","write_char","write_fmt","write_fmt","write_fmt","write_str","write_str","write_str"],"q":["vga_buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","vga_buffer::fmt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","A trait for writing or formatting into Unicode-accepting …","","","","","","","","","","Utilities for formatting and printing strings.","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Writes a <code>char</code> into this writer, returning whether the …","Writes a <code>char</code> into this writer, returning whether the …","Writes a <code>char</code> into this writer, returning whether the …","Glue for usage of the <code>write!</code> macro with implementors of …","Glue for usage of the <code>write!</code> macro with implementors of …","Glue for usage of the <code>write!</code> macro with implementors of …","Writes a string slice into this writer, returning whether …","","Possible alignments returned by <code>Formatter::align</code>","This structure represents a safely precompiled version of …","<code>b</code> formatting.","Indication that contents should be center-aligned.","<code>?</code> formatting.","Derive macro generating an impl of the trait <code>Debug</code>.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","Format trait for an empty format, <code>{}</code>.","The error type which is returned from formatting a message …","Configuration for formatting.","Indication that contents should be left-aligned.","<code>e</code> formatting.","<code>x</code> formatting.","<code>o</code> formatting.","<code>p</code> formatting.","The type returned by formatter methods.","Indication that contents should be right-aligned.","<code>E</code> formatting.","<code>X</code> formatting.","A trait for writing or formatting into Unicode-accepting …","Flag indicating what form of alignment was requested.","Determines if the <code>#</code> flag was specified.","Get the formatted string, if it has no arguments to be …","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>DebugList</code> builder designed to assist with …","Creates a <code>DebugMap</code> builder designed to assist with …","Creates a <code>DebugSet</code> builder designed to assist with …","Creates a <code>DebugStruct</code> builder designed to assist with …","Creates a <code>DebugTuple</code> builder designed to assist with …","","Adds the contents of an iterator of entries to the set …","Adds the contents of an iterator of entries to the list …","Adds the contents of an iterator of entries to the map …","Adds a new entry to the set output.","Adds a new entry to the list output.","Adds a new entry to the map output.","","","Adds a new field to the generated struct output.","Adds a new field to the generated tuple struct output.","Character used as ‘fill’ whenever there is alignment.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Marks the struct as non-exhaustive, indicating to the …","Flags for formatting","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Adds the key part of a new entry to the map output.","This function takes a string slice and emits it to the …","Performs the correct padding for an integer which has …","","Optionally specified precision for numeric types. …","Determines if the <code>0</code> flag was specified.","Determines if the <code>-</code> flag was specified.","Determines if the <code>+</code> flag was specified.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds the value part of a new entry to the map output.","Optionally specified integer width that the output should …","The <code>write</code> function takes an output stream, and an <code>Arguments</code>…","Writes a <code>char</code> into this writer, returning whether the …","","Glue for usage of the <code>write!</code> macro with implementors of …","","Writes some formatted information into this instance.","Writes a string slice into this writer, returning whether …","","Writes some data to the underlying buffer contained within …"],"i":[1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,2,1,2,1,1,1,1,0,1,2,1,2,1,0,0,0,0,0,1,2,1,2,1,2,1,2,3,3,3,3,3,3,3,2,0,0,0,4,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,5,5,6,7,8,9,10,11,5,4,12,6,7,8,9,10,11,5,4,12,6,4,12,6,4,12,6,12,5,5,5,5,5,12,9,10,11,9,10,11,4,12,7,8,5,7,8,9,10,11,7,5,13,14,15,16,17,18,19,20,21,4,12,12,6,6,7,8,9,10,11,5,4,12,6,12,7,8,9,10,11,5,4,12,6,11,5,5,12,5,5,5,5,4,12,6,12,6,7,8,9,10,11,5,4,12,6,7,8,9,10,11,5,4,12,6,7,8,9,10,11,5,4,12,6,11,5,0,3,5,3,5,5,3,5,5],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["color",4]],["color",4]],[[["",0],["",0]]],[[["color",4],["color",4]],["bool",0]],null,[[["color",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["writer",3],["u8",0]]],[[["",0],["char",0]],["result",4,[["error",3]]]],[[["",0],["char",0]],["result",4,[["error",3]]]],[[["",0],["char",0]],["result",4,[["error",3]]]],[[["",0],["arguments",3]],["result",4,[["error",3]]]],[[["",0],["arguments",3]],["result",4,[["error",3]]]],[[["",0],["arguments",3]],["result",4,[["error",3]]]],[[["",0],["str",0]],["result",4,[["error",3]]]],[[["writer",3],["str",0]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["formatter",3]],["option",4,[["alignment",4]]]],[[["formatter",3]],["bool",0]],[[["arguments",3]],["option",4,[["str",0]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["alignment",4]],["alignment",4]],[[["error",3]],["error",3]],[[["arguments",3]],["arguments",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["error",3],["error",3]],["ordering",4]],[[["formatter",3]],["debuglist",3]],[[["formatter",3]],["debugmap",3]],[[["formatter",3]],["debugset",3]],[[["formatter",3],["str",0]],["debugstruct",3]],[[["formatter",3],["str",0]],["debugtuple",3]],[[],["error",3]],[[["debugset",3]],["debugset",3]],[[["debuglist",3]],["debuglist",3]],[[["debugmap",3]],["debugmap",3]],[[["debugset",3],["debug",8]],["debugset",3]],[[["debuglist",3],["debug",8]],["debuglist",3]],[[["debugmap",3],["debug",8],["debug",8]],["debugmap",3]],[[["alignment",4],["alignment",4]],["bool",0]],[[["error",3],["error",3]],["bool",0]],[[["debugstruct",3],["str",0],["debug",8]],["debugstruct",3]],[[["debugtuple",3],["debug",8]],["debugtuple",3]],[[["formatter",3]],["char",0]],[[["debugstruct",3]],["result",4,[["error",3]]]],[[["debugtuple",3]],["result",4,[["error",3]]]],[[["debugset",3]],["result",4,[["error",3]]]],[[["debuglist",3]],["result",4,[["error",3]]]],[[["debugmap",3]],["result",4,[["error",3]]]],[[["debugstruct",3]],["result",4,[["error",3]]]],[[["formatter",3]],["u32",0]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["alignment",4],["formatter",3]],["result",4,[["error",3]]]],[[["error",3],["formatter",3]],["result",4,[["error",3]]]],[[["error",3],["formatter",3]],["result",4,[["error",3]]]],[[["arguments",3],["formatter",3]],["result",4,[["error",3]]]],[[["arguments",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["error",3],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["debugmap",3],["debug",8]],["debugmap",3]],[[["formatter",3],["str",0]],["result",4,[["error",3]]]],[[["formatter",3],["bool",0],["str",0],["str",0]],["result",4,[["error",3]]]],[[["error",3],["error",3]],["option",4,[["ordering",4]]]],[[["formatter",3]],["option",4,[["usize",0]]]],[[["formatter",3]],["bool",0]],[[["formatter",3]],["bool",0]],[[["formatter",3]],["bool",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["debugmap",3],["debug",8]],["debugmap",3]],[[["formatter",3]],["option",4,[["usize",0]]]],[[["write",8],["arguments",3]],["result",4,[["error",3]]]],[[["",0],["char",0]],["result",4,[["error",3]]]],[[["formatter",3],["char",0]],["result",4,[["error",3]]]],[[["",0],["arguments",3]],["result",4,[["error",3]]]],[[["formatter",3],["arguments",3]],["result",4,[["error",3]]]],[[["formatter",3],["arguments",3]],["result",4,[["error",3]]]],[[["",0],["str",0]],["result",4,[["error",3]]]],[[["formatter",3],["str",0]],["result",4,[["error",3]]]],[[["formatter",3],["str",0]],["result",4,[["error",3]]]]],"p":[[4,"Color"],[3,"Writer"],[8,"Write"],[4,"Alignment"],[3,"Formatter"],[3,"Arguments"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[8,"Debug"],[8,"Display"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"]],"a":{"{:?}":[57],"{}":[64]}},\
"volatile":{"doc":"Provides the wrapper type <code>Volatile</code>, which wraps a …","t":[3,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,8,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Volatile","access","as_mut_slice","as_slice","borrow","borrow_mut","clone","extract_inner","fmt","fmt","from","index","index_mut","into","map","map_mut","new","new_read_only","new_write_only","read","read_only","try_from","try_into","type_id","update","write","write_only","ReadOnly","ReadWrite","Readable","Writable","WriteOnly","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","fmt","fmt","fmt","from","from","from","into","into","into","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["volatile","","","","","","","","","","","","","","","","","","","","","","","","","","","volatile::access","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Wraps a reference to make accesses to the referenced value …","Allows creating read-only and write-only <code>Volatile</code> values.","Converts a mutable array reference to a mutable slice.","Converts an array reference to a shared slice.","","","","Extracts the inner value stored in the wrapper type.","","","Returns the argument unchanged.","Applies the index operation on the wrapped slice.","Applies the mutable index operation on the wrapped slice.","Calls <code>U::from(self)</code>.","Constructs a new <code>Volatile</code> reference by mapping the wrapped …","Constructs a new mutable <code>Volatile</code> reference by mapping the …","Constructs a new volatile instance wrapping the given …","Constructs a new read-only volatile instance wrapping the …","Constructs a new write-only volatile instance wrapping the …","Performs a volatile read of the contained value.","Restricts access permissions to read-only.","","","","Updates the contained value using the given closure and …","Performs a volatile write, setting the contained value to …","Restricts access permissions to write-only.","Zero-sized marker type for allowing only read access.","Zero-sized marker type for allowing both read and write …","Helper trait that is implemented by <code>ReadWrite</code> and <code>ReadOnly</code>.","Helper trait that is implemented by <code>ReadWrite</code> and <code>WriteOnly</code>…","Zero-sized marker type for allowing only write access.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4],"f":[null,null,[[["volatile",3]],["volatile",3]],[[["volatile",3]],["volatile",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["volatile",3,[["clone",8],["clone",8]]]],["volatile",3,[["clone",8],["clone",8]]]],[[["volatile",3]]],[[["volatile",3],["formatter",3]],["result",6]],[[["volatile",3,[["writeonly",3]]],["formatter",3]],["result",6]],[[]],[[["volatile",3]],["volatile",3]],[[["volatile",3]],["volatile",3]],[[]],[[["volatile",3]],["volatile",3]],[[["volatile",3]],["volatile",3]],[[],["volatile",3]],[[],["volatile",3,[["readonly",3]]]],[[],["volatile",3,[["writeonly",3]]]],[[["volatile",3]]],[[["volatile",3]],["volatile",3,[["readonly",3]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["volatile",3]]],[[["volatile",3]]],[[["volatile",3]],["volatile",3,[["writeonly",3]]]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["readwrite",3]],["readwrite",3]],[[["readonly",3]],["readonly",3]],[[["writeonly",3]],["writeonly",3]],[[["readwrite",3],["formatter",3]],["result",6]],[[["readonly",3],["formatter",3]],["result",6]],[[["writeonly",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"Volatile"],[3,"ReadWrite"],[3,"ReadOnly"],[3,"WriteOnly"]]},\
"x86_64":{"doc":"This crate provides x86_64 specific functions and data …","t":[2,4,13,13,13,13,2,0,2,2,11,11,11,11,11,11,11,11,0,11,0,14,14,0,11,11,11,12,12,3,3,3,3,11,11,11,11,11,11,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,0,5,0,0,5,0,0,0,5,5,5,5,5,5,6,3,2,8,6,2,8,6,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,2,2,2,2,2,2,2,2,5,5,5,5,5,5,5,5,5,5,5,5,2,5,5,5,5,5,13,13,13,4,3,13,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,0,0,0,0,2,2,2,0,0,2,2,0,18,18,18,3,3,3,3,3,3,3,18,18,18,2,2,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,4,4,13,13,8,4,3,13,3,13,3,13,3,13,3,3,3,3,3,18,18,18,18,18,18,13,13,18,18,18,18,18,13,13,13,13,18,18,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,3,3,3,18,3,3,18,18,18,18,18,18,3,18,18,18,3,18,18,18,18,18,18,18,18,18,3,18,3,18,3,18,18,18,3,18,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,18,18,18,18,18,3,18,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,5,18,18,18,18,18,18,18,18,18,18,18,18,3,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,5,5,12,18,3,3,3,3,3,18,3,8,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,18,18,18,18,18,18,18,18,18,3,3,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,11,0,0,11,12,0,0,11,11,0,11,18,18,18,18,18,18,18,4,3,18,18,3,18,18,18,18,18,18,18,2,13,18,18,18,18,13,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,13,13,13,18,13,13,4,13,6,6,13,13,3,3,4,13,6,13,6,6,13,18,13,3,3,3,13,13,13,18,13,13,13,18,18,13,3,6,18,18,18,13,13,3,13,13,18,13,13,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,8,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,10,10,0,0,0,0,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,8,4,13,13,13,13,4,4,13,4,3,8,8,3,3,13,13,13,3,13,13,13,13,8,13,13,13,13,3,13,13,13,8,4,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,3,8,3,3,3,8,18,18,18,4,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,13,4,13,18,18,13,18,18,13,18,3,3,3,3,3,4,13,13,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,10,10,3,11,11,11,11,11,12,11,12,11,12,11,11,11],"n":["PhysAddr","PrivilegeLevel","Ring0","Ring1","Ring2","Ring3","VirtAddr","addr","align_down","align_up","borrow","borrow_mut","clone","eq","fmt","from","from_u16","hash","instructions","into","registers","set_general_handler","software_interrupt","structures","try_from","try_into","type_id","0","0","PhysAddr","PhysAddrNotValid","VirtAddr","VirtAddrNotValid","add","add","add","add","add_assign","add_assign","add_assign","add_assign","align_down","align_down","align_down","align_up","align_up","align_up","as_mut_ptr","as_ptr","as_u64","as_u64","backward_checked","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","cmp","cmp","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward_checked","from","from","from","from","from_ptr","hash","hash","into","into","into","into","is_aligned","is_aligned","is_null","is_null","ne","ne","new","new","new_truncate","new_truncate","new_unsafe","new_unsafe","p1_index","p2_index","p3_index","p4_index","page_offset","page_table_index","partial_cmp","partial_cmp","steps_between","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_new","try_new","type_id","type_id","type_id","type_id","zero","zero","bochs_breakpoint","hlt","interrupts","nop","port","random","read_rip","segmentation","tables","tlb","are_enabled","disable","enable","enable_and_hlt","int3","without_interrupts","Port","PortGeneric","PortRead","PortReadAccess","PortReadOnly","PortWrite","PortWriteAccess","PortWriteOnly","ReadOnlyAccess","ReadWriteAccess","WriteOnlyAccess","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","eq","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","new","read","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","RdRand","borrow","borrow_mut","clone","fmt","from","get_u16","get_u32","get_u64","into","new","try_from","try_into","type_id","CS","DS","ES","FS","GS","SS","Segment","Segment64","cs","load_ds","load_es","load_fs","load_gs","load_ss","rdfsbase","rdgsbase","set_cs","swap_gs","wrfsbase","wrgsbase","DescriptorTablePointer","lgdt","lidt","load_tss","sgdt","sidt","Address","All","AllExceptGlobal","InvPicdCommand","Pcid","Single","borrow","borrow","borrow_mut","borrow_mut","clone","cmp","eq","flush","flush_all","flush_pcid","fmt","fmt","from","from","hash","into","into","ne","new","partial_cmp","try_from","try_from","try_into","try_into","type_id","type_id","value","0","0","1","control","debug","model_specific","mxcsr","rdfsbase","rdgsbase","read_rip","rflags","segmentation","wrfsbase","wrgsbase","xcontrol","ALIGNMENT_MASK","CACHE_DISABLE","CONTROL_FLOW_ENFORCEMENT","Cr0","Cr0Flags","Cr2","Cr3","Cr3Flags","Cr4","Cr4Flags","DEBUGGING_EXTENSIONS","EMULATE_COPROCESSOR","EXTENSION_TYPE","Efer","EferFlags","FSGSBASE","KEY_LOCKER","L5_PAGING","MACHINE_CHECK_EXCEPTION","MONITOR_COPROCESSOR","NOT_WRITE_THROUGH","NUMERIC_ERROR","OSFXSR","OSXMMEXCPT_ENABLE","OSXSAVE","PAGE_GLOBAL","PAGE_LEVEL_CACHE_DISABLE","PAGE_LEVEL_WRITETHROUGH","PAGE_SIZE_EXTENSION","PAGING","PCID","PERFORMANCE_MONITOR_COUNTER","PHYSICAL_ADDRESS_EXTENSION","PROTECTED_MODE_ENABLE","PROTECTED_MODE_VIRTUAL_INTERRUPTS","PROTECTION_KEY","PROTECTION_KEY_SUPERVISOR","PROTECTION_KEY_USER","SAFER_MODE_EXTENSIONS","SUPERVISOR_MODE_ACCESS_PREVENTION","SUPERVISOR_MODE_EXECUTION_PROTECTION","TASK_SWITCHED","TIMESTAMP_DISABLE","USER_MODE_INSTRUCTION_PREVENTION","VIRTUAL_8086_MODE_EXTENSIONS","VIRTUAL_MACHINE_EXTENSIONS","WRITE_PROTECT","all","all","all","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","cmp","complement","complement","complement","contains","contains","contains","difference","difference","difference","empty","empty","empty","eq","eq","eq","extend","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_iter","hash","hash","hash","insert","insert","insert","intersection","intersection","intersection","intersects","intersects","intersects","into","into","into","into","into","into","into","is_all","is_all","is_all","is_empty","is_empty","is_empty","ne","ne","ne","not","not","not","partial_cmp","partial_cmp","partial_cmp","read","read","read","read","read_pcid","read_raw","read_raw","read_raw","read_raw","remove","remove","remove","set","set","set","sub","sub","sub","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","update","update","write","write","write","write_pcid","write_raw","write_raw","ACCESS_DETECTED","BreakpointCondition","BreakpointSize","DataReadsWrites","DataWrites","DebugAddressRegister","DebugAddressRegisterNumber","Dr0","Dr0","Dr1","Dr1","Dr2","Dr2","Dr3","Dr3","Dr6","Dr6Flags","Dr7","Dr7Flags","Dr7Value","GENERAL_DETECT_ENABLE","GLOBAL_BREAKPOINT_0_ENABLE","GLOBAL_BREAKPOINT_1_ENABLE","GLOBAL_BREAKPOINT_2_ENABLE","GLOBAL_BREAKPOINT_3_ENABLE","GLOBAL_EXACT_BREAKPOINT_ENABLE","InstructionExecution","IoReadsWrites","LOCAL_BREAKPOINT_0_ENABLE","LOCAL_BREAKPOINT_1_ENABLE","LOCAL_BREAKPOINT_2_ENABLE","LOCAL_BREAKPOINT_3_ENABLE","LOCAL_EXACT_BREAKPOINT_ENABLE","Length1B","Length2B","Length4B","Length8B","NUM","RESTRICTED_TRANSACTIONAL_MEMORY","RTM","STEP","SWITCH","TRAP","TRAP0","TRAP1","TRAP2","TRAP3","all","all","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","cmp","cmp","complement","complement","condition","contains","contains","difference","difference","empty","empty","eq","eq","eq","eq","eq","eq","extend","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","get","global_breakpoint_enable","hash","hash","insert","insert","insert_flags","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","is_all","is_all","is_empty","is_empty","local_breakpoint_enable","ne","ne","ne","new","new","not","not","partial_cmp","partial_cmp","read","read","read","read","read","read","read","read_raw","read_raw","remove","remove","remove_flags","set","set","set_condition","set_flags","set_size","size","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","toggle","toggle","toggle_flags","trap","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","write","write","write","write","write","write","write_raw","CetFlags","Efer","EferFlags","FAST_FXSAVE_FXRSTOR","FsBase","GsBase","IBT_ENABLE","IBT_LEGACY_ENABLE","IBT_LEGACY_SUPPRESS_ENABLE","IBT_NO_TRACK_ENABLE","IBT_SUPPRESS_ENABLE","IBT_TRACKED","KernelGsBase","LONG_MODE_ACTIVE","LONG_MODE_ENABLE","LONG_MODE_SEGMENT_LIMIT_ENABLE","LStar","MSR","MSR","MSR","MSR","MSR","MSR","MSR","MSR","MSR","Msr","NO_EXECUTE_ENABLE","SCet","SECURE_VIRTUAL_MACHINE_ENABLE","SFMask","SS_ENABLE","SS_WRITE_ENABLE","SYSTEM_CALL_EXTENSIONS","Star","TRANSLATION_CACHE_EXTENSION","UCet","all","all","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","cmp","cmp","complement","complement","contains","contains","difference","difference","empty","empty","eq","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","hash","hash","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","is_all","is_all","is_empty","is_empty","ne","ne","new","not","not","partial_cmp","partial_cmp","read","read","read","read","read","read","read","read","read","read","read_raw","read_raw","remove","remove","set","set","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","update","write","write","write","write","write","write","write","write","write","write","write_raw","write_raw","DENORMAL","DENORMALS_ARE_ZEROS","DENORMAL_MASK","DIVIDE_BY_ZERO","DIVIDE_BY_ZERO_MASK","FLUSH_TO_ZERO","INVALID_OPERATION","INVALID_OPERATION_MASK","MxCsr","OVERFLOW","OVERFLOW_MASK","PRECISION","PRECISION_MASK","ROUNDING_CONTROL_NEGATIVE","ROUNDING_CONTROL_POSITIVE","ROUNDING_CONTROL_ZERO","UNDERFLOW","UNDERFLOW_MASK","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","cmp","complement","contains","default","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","is_all","is_empty","ne","not","partial_cmp","read","remove","set","sub","sub_assign","symmetric_difference","toggle","try_from","try_into","type_id","union","write","ALIGNMENT_CHECK","AUXILIARY_CARRY_FLAG","CARRY_FLAG","DIRECTION_FLAG","ID","INTERRUPT_FLAG","IOPL_HIGH","IOPL_LOW","NESTED_TASK","OVERFLOW_FLAG","PARITY_FLAG","RESUME_FLAG","RFlags","SIGN_FLAG","TRAP_FLAG","VIRTUAL_8086_MODE","VIRTUAL_INTERRUPT","VIRTUAL_INTERRUPT_PENDING","ZERO_FLAG","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","cmp","complement","contains","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","is_all","is_empty","ne","not","partial_cmp","read","read_raw","remove","set","sub","sub_assign","symmetric_difference","toggle","try_from","try_into","type_id","union","write","write_raw","0","BASE","CS","DS","ES","FS","GS","NULL","SS","Segment","Segment64","SegmentSelector","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","cmp","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_reg","get_reg","get_reg","get_reg","get_reg","get_reg","get_reg","hash","index","into","into","into","into","into","into","into","ne","new","partial_cmp","read_base","read_base","read_base","rpl","set_reg","set_reg","set_reg","set_reg","set_reg","set_reg","set_reg","set_rpl","swap","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write_base","write_base","write_base","AVX","BNDCSR","BNDREG","HI16_ZMM","LWP","MPK","OPMASK","SSE","X87","XCr0","XCr0Flags","YMM","ZMM_HI256","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","cmp","complement","contains","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","into","is_all","is_empty","ne","not","partial_cmp","read","read_raw","remove","set","sub","sub_assign","symmetric_difference","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","write","write_raw","DescriptorTablePointer","base","borrow","borrow_mut","clone","fmt","from","gdt","idt","into","limit","paging","port","try_from","try_into","tss","type_id","ACCESSED","AVAILABLE","BASE_0_23","BASE_24_31","CONFORMING","DEFAULT_SIZE","DPL_RING_3","Descriptor","DescriptorFlags","EXECUTABLE","GRANULARITY","GlobalDescriptorTable","KERNEL_CODE32","KERNEL_CODE64","KERNEL_DATA","LIMIT_0_15","LIMIT_16_19","LONG_MODE","PRESENT","SegmentSelector","SystemSegment","USER_CODE32","USER_CODE64","USER_DATA","USER_SEGMENT","UserSegment","WRITABLE","add_entry","all","as_raw_slice","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","complement","contains","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_raw_slice","hash","insert","intersection","intersects","into","into","into","is_all","is_empty","kernel_code_segment","kernel_data_segment","load","load_unsafe","ne","new","not","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","toggle","try_from","try_from","try_from","try_into","try_into","try_into","tss_segment","type_id","type_id","type_id","union","user_code_segment","user_data_segment","0","0","1","AlignmentCheck","BoundRange","Breakpoint","CAUSED_BY_WRITE","ControlProtection","Debug","DescriptorTable","DeviceNotAvailable","DivergingHandlerFunc","DivergingHandlerFuncWithErrCode","Division","Double","Entry","EntryOptions","ExceptionVector","Gdt","GeneralHandlerFunc","GeneralProtection","HandlerFunc","HandlerFuncWithErrCode","HypervisorInjection","INSTRUCTION_FETCH","Idt","InterruptDescriptorTable","InterruptStackFrame","InterruptStackFrameValue","InvalidOpcode","InvalidTss","Ldt","MALFORMED_TABLE","MachineCheck","NonMaskableInterrupt","Overflow","PROTECTION_KEY","PROTECTION_VIOLATION","Page","PageFaultErrorCode","PageFaultHandlerFunc","RMP","SGX","SHADOW_STACK","Security","SegmentNotPresent","SelectorErrorCode","SimdFloatingPoint","Stack","USER_MODE","Virtualization","VmmCommunication","X87FloatingPoint","alignment_check","all","as_mut","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bound_range_exceeded","breakpoint","clone","clone","clone","clone","clone","clone","clone","clone","cmp","code_segment","complement","contains","cp_protection_exception","cpu_flags","debug","deref","descriptor_table","device_not_available","difference","disable_interrupts","divide_error","double_fault","empty","eq","eq","eq","eq","eq","eq","extend","external","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","general_protection_fault","handler_addr","hash","hash","hash","hv_injection_exception","index","index","index_mut","insert","instruction_pointer","intersection","intersects","into","into","into","into","into","into","into","into","into","invalid_opcode","invalid_tss","is_all","is_empty","is_null","load","load_unsafe","machine_check","missing","ne","ne","ne","new","new","new_truncate","non_maskable_interrupt","not","overflow","page_fault","partial_cmp","remove","reset","security_exception","segment_not_present","set","set_handler_addr","set_handler_fn","set_handler_fn","set_handler_fn","set_handler_fn","set_handler_fn","set_present","set_privilege_level","set_stack_index","simd_floating_point","slice","slice_mut","stack_pointer","stack_segment","stack_segment_fault","sub","sub_assign","symmetric_difference","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","virtualization","vmm_communication_exception","x87_floating_point","FrameAllocator","FrameDeallocator","MappedPageTable","Mapper","OffsetPageTable","Page","PageOffset","PageSize","PageTable","PageTableFlags","PageTableIndex","PhysFrame","RecursivePageTable","Size1GiB","Size2MiB","Size4KiB","Translate","allocate_frame","deallocate_frame","frame","mapper","page","page_table","PhysFrame","PhysFrameRange","PhysFrameRangeInclusive","add","add_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","containing_address","end","end","eq","eq","eq","fmt","fmt","fmt","from","from","from","from_start_address","from_start_address_unchecked","hash","hash","hash","into","into","into","into_iter","into_iter","is_empty","is_empty","ne","ne","ne","next","next","partial_cmp","range","range_inclusive","size","start","start","start_address","sub","sub","sub_assign","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","CleanUp","FlagUpdateError","FrameAllocationFailed","InvalidFrameAddress","InvalidFrameAddress","InvalidFrameAddress","InvalidPageTable","MapToError","Mapped","MappedFrame","MappedPageTable","Mapper","MapperAllSizes","MapperFlush","MapperFlushAll","NotActive","NotMapped","NotRecursive","OffsetPageTable","PageAlreadyMapped","PageNotMapped","PageNotMapped","PageNotMapped","PageTableFrameMapping","ParentEntryHugePage","ParentEntryHugePage","ParentEntryHugePage","ParentEntryHugePage","RecursivePageTable","Size1GiB","Size2MiB","Size4KiB","Translate","TranslateError","TranslateResult","UnmapError","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clean_up","clean_up","clean_up","clean_up","clean_up_addr_range","clean_up_addr_range","clean_up_addr_range","clean_up_addr_range","default","flush","flush_all","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frame_to_pointer","from","from","from","from","from","from","from","from","from","from","from","from","identity_map","ignore","ignore","into","into","into","into","into","into","into","into","into","into","into","into","level_4_table","level_4_table","level_4_table","map_to","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","map_to_with_table_flags","new","new","new","new","new","new_unchecked","page_table_frame_mapping","phys_offset","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p2_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p3_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","set_flags_p4_entry","size","start_address","translate","translate","translate","translate","translate_addr","translate_page","translate_page","translate_page","translate_page","translate_page","translate_page","translate_page","translate_page","translate_page","translate_page","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unmap","unmap","unmap","unmap","unmap","unmap","unmap","unmap","unmap","unmap","update_flags","update_flags","update_flags","update_flags","update_flags","update_flags","update_flags","update_flags","update_flags","update_flags","0","0","0","0","0","0","flags","frame","offset","0","AddressNotAligned","NotGiantPageSize","Page","PageRange","PageRangeInclusive","PageSize","SIZE","SIZE","SIZE_AS_DEBUG_STR","Size1GiB","Size2MiB","Size4KiB","add","add_assign","as_4kib_page_range","backward_checked","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","containing_address","end","end","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward_checked","from","from","from","from","from","from","from","from_page_table_indices","from_page_table_indices_1gib","from_page_table_indices_2mib","from_start_address","from_start_address_unchecked","hash","hash","hash","into","into","into","into","into","into","into","into_iter","into_iter","is_empty","is_empty","ne","ne","ne","next","next","p1_index","p2_index","p3_index","p4_index","page_table_index","partial_cmp","partial_cmp","partial_cmp","partial_cmp","range","range_inclusive","size","start","start","start_address","steps_between","sub","sub","sub_assign","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ACCESSED","BIT_10","BIT_11","BIT_52","BIT_53","BIT_54","BIT_55","BIT_56","BIT_57","BIT_58","BIT_59","BIT_60","BIT_61","BIT_62","BIT_9","DIRTY","Four","FrameError","FrameNotPresent","GLOBAL","HUGE_PAGE","HugeFrame","NO_CACHE","NO_EXECUTE","One","PRESENT","PageOffset","PageTable","PageTableEntry","PageTableFlags","PageTableIndex","PageTableLevel","Three","Two","USER_ACCESSIBLE","WRITABLE","WRITE_THROUGH","addr","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","complement","contains","default","difference","empty","entry_address_space_alignment","eq","eq","eq","eq","eq","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frame","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","hash","hash","hash","index","index","index_mut","index_mut","insert","intersection","intersects","into","into","into","into","into","into","into","is_all","is_empty","is_unused","iter","iter_mut","ne","ne","ne","new","new","new","new","new_truncate","new_truncate","next_lower_level","not","partial_cmp","partial_cmp","partial_cmp","partial_cmp","remove","set","set_addr","set_flags","set_frame","set_unused","sub","sub_assign","symmetric_difference","table_address_space_alignment","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","zero","PortRead","PortWrite","read_from_port","write_to_port","TaskStateSegment","borrow","borrow_mut","clone","fmt","from","interrupt_stack_table","into","iomap_base","new","privilege_stack_table","try_from","try_into","type_id"],"q":["x86_64","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::addr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::instructions","","","","","","","","","","x86_64::instructions::interrupts","","","","","","x86_64::instructions::port","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::instructions::random","","","","","","","","","","","","","","x86_64::instructions::segmentation","","","","","","","","","","","","","","","","","","","","x86_64::instructions::tables","","","","","","x86_64::instructions::tlb","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::instructions::tlb::InvPicdCommand","","","x86_64::registers","","","","","","","","","","","","x86_64::registers::control","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::registers::debugx86_64::registers::model_specificx86_64::registers::mxcsr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::registers::rflags","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::registers::segmentation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::registers::xcontrol","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::structures","","","","","","","","","","","","","","","","","x86_64::structures::gdt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::structures::gdt::Descriptor","","","x86_64::structures::idtx86_64::structures::paging","","","","","","","","","","","","","","","","","","","","","","","x86_64::structures::paging::frame","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::structures::paging::mapperx86_64::structures::paging::mapper::MapToError","x86_64::structures::paging::mapper::MappedFrame","","","x86_64::structures::paging::mapper::TranslateError","x86_64::structures::paging::mapper::TranslateResult","","","","x86_64::structures::paging::mapper::UnmapError","x86_64::structures::paging::page","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x86_64::structures::paging::page_tablex86_64::structures::port","","","","x86_64::structures::tss","","","","","","","","","","","","",""],"d":["","Represents a protection ring level.","Privilege-level 0 (most privilege): This level is used by …","Privilege-level 1 (moderate privilege): This level is used …","Privilege-level 2 (moderate privilege): Like level 1, this …","Privilege-level 3 (least privilege): This level is used by …","","Physical and virtual addresses manipulation","","","","","","","","Returns the argument unchanged.","Creates a <code>PrivilegeLevel</code> from a numeric value. The value …","","Special x86_64 instructions.","Calls <code>U::from(self)</code>.","Access to various system and model specific registers.","Set a general handler in an <code>InterruptDescriptorTable</code>.","Generate a software interrupt by invoking the <code>int</code> …","Representations of various x86 specific structures and …","","","","","","A 64-bit physical memory address.","A passed <code>u64</code> was not a valid physical address.","A canonical 64-bit virtual memory address.","A passed <code>u64</code> was not a valid virtual address.","","","","","","","","","Align address downwards.","Aligns the virtual address downwards to the given …","Aligns the physical address downwards to the given …","Align address upwards.","Aligns the virtual address upwards to the given alignment.","Aligns the physical address upwards to the given alignment.","Converts the address to a mutable raw pointer.","Converts the address to a raw pointer.","Converts the address to an <code>u64</code>.","Converts the address to an <code>u64</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a virtual address from the given pointer","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks whether the virtual address has the demanded …","Checks whether the physical address has the demanded …","Convenience method for checking if a virtual address is …","Convenience method for checking if a physical address is …","","","Creates a new canonical virtual address.","Creates a new physical address.","Creates a new canonical virtual address, throwing out bits …","Creates a new physical address, throwing bits 52..64 away.","Creates a new virtual address, without any checks.","Creates a new physical address, without any checks.","Returns the 9-bit level 1 page table index.","Returns the 9-bit level 2 page table index.","Returns the 9-bit level 3 page table index.","Returns the 9-bit level 4 page table index.","Returns the 12-bit page offset of this virtual address.","Returns the 9-bit level page table index.","","","","","","","","","","","","","","","","","","","","","","Tries to create a new canonical virtual address.","Tries to create a new physical address.","","","","","Creates a virtual address that points to <code>0</code>.","Creates a physical address that points to <code>0</code>.","Emits a ‘magic breakpoint’ instruction for the Bochs …","Halts the CPU until the next interrupt arrives.","Enabling and disabling interrupts","Executes the <code>nop</code> instructions, which performs no operation …","Access to I/O ports","Support for build-in RNGs","Gets the current instruction pointer. Note that this is …","Provides functions to read and write segment registers.","Functions to load GDT, IDT, and TSS structures.","Functions to flush the translation lookaside buffer (TLB).","Returns whether interrupts are enabled.","Disable interrupts.","Enable interrupts.","Atomically enable interrupts and put the CPU to sleep","Cause a breakpoint exception by invoking the <code>int3</code> …","Run a closure with disabled interrupts.","A read-write I/O port.","An I/O port.","","A marker trait for access types which allow reading port …","A read-only I/O port.","","A marker trait for access types which allow writing port …","A write-only I/O port.","An access marker type indicating that a port is only …","An access marker type indicating that a port is allowed to …","An access marker type indicating that a port is only …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates an I/O port with the given port number.","Reads from the port.","","","","","","","","","","","","","Writes to the port.","Used to obtain random numbers using x86_64’s RDRAND …","","","","","Returns the argument unchanged.","Uniformly sampled u16. May fail in rare circumstances or …","Uniformly sampled u32. May fail in rare circumstances or …","Uniformly sampled u64. May fail in rare circumstances or …","Calls <code>U::from(self)</code>.","Creates Some(RdRand) if RDRAND is supported, None otherwise","","","","","","","","","","","","Alias for <code>CS::get_reg()</code>","Alias for <code>DS::set_reg()</code>","Alias for <code>ES::set_reg()</code>","Alias for <code>FS::set_reg()</code>","Alias for <code>GS::set_reg()</code>","Alias for <code>SS::set_reg()</code>","Alias for <code>FS::read_base()</code>","Alias for <code>GS::read_base()</code>","Alias for <code>CS::set_reg()</code>","Alias for <code>GS::swap()</code>","Alias for <code>FS::write_base()</code>.","Alias for <code>GS::write_base()</code>.","","Load a GDT.","Load an IDT.","Load the task state register using the <code>ltr</code> instruction.","Get the address of the current GDT.","Get the address of the current IDT.","The logical processor invalidates mappings—except global …","The logical processor invalidates all mappings—including …","The logical processor invalidates all mappings—except …","The Invalidate PCID Command to execute.","Structure of a PCID. A PCID has to be &lt;= 4096 for x86_64.","The logical processor invalidates all mappings—except …","","","","","","","","Invalidate the given address in the TLB using the <code>invlpg</code> …","Invalidate the TLB completely by reloading the CR3 …","Invalidate the given address in the TLB using the <code>invpcid</code> …","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new PCID. Will result in a failure if the value of","","","","","","","","Get the value of the current PCID.","","","","Functions to read and write control registers.","Functions to read and write debug registers.","Functions to read and write model specific registers.","Functions to read and write MXCSR register.","","","","Processor state stored in the RFLAGS register.","Abstractions for segment registers.","","","Access to various extended system registers","Enables automatic usermode alignment checking if […","Disables some processor caches, specifics are …","Enables Control-flow Enforcement Technology (CET)","Various control flags modifying the basic operation of the …","Configuration flags of the <code>Cr0</code> register.","Contains the Page Fault Linear Address (PFLA).","Contains the physical address of the highest-level page …","Controls cache settings for the highest-level page table.","Contains various control flags that enable architectural …","Configuration flags of the <code>Cr4</code> register.","Enables I/O breakpoint capability and enforces treatment …","Force all x87 and MMX instructions to cause an <code>#NE</code> …","Indicates support of 387DX math coprocessor instructions.","","","Enables software running in 64-bit mode at any privilege …","Enables the Key Locker feature (Intel Only).","Enables 5-level paging on supported CPUs (Intel Only).","Enables the machine-check exception mechanism.","Enables monitoring of the coprocessor, typical for x87 …","Ignored, should always be unset.","Enables the native (internal) error reporting mechanism …","Enables the use of legacy SSE instructions; allows using …","Enables the SIMD floating-point exception (<code>#XF</code>) for …","Enables extended processor state management instructions, …","Enables the global page feature, allowing some page …","Disable caching for the table.","Use a writethrough cache policy for the table (otherwise a …","Enables the use of 4MB physical frames; ignored if …","Enables paging.","Enables process-context identifiers (PCIDs).","Allows software running at any privilege level to use the …","Enables physical address extensions and 2MB physical …","Enables protected mode.","Enables support for protected-mode virtual interrupts.","Alias for <code>PROTECTION_KEY_USER</code>","Enables protection keys for supervisor-mode pages (Intel …","Enables protection keys for user-mode pages.","Enables SMX instructions (Intel Only).","Enables restrictions for supervisor-mode software when …","Prevents the execution of instructions that reside in …","Automatically set to 1 on <em>hardware</em> task switch.","When set, only privilege-level 0 can execute the <code>RDTSC</code> or …","Prevents the execution of the <code>SGDT</code>, <code>SIDT</code>, <code>SLDT</code>, <code>SMSW</code>, and …","Enables hardware-supported performance enhancements for …","Enables VMX instructions (Intel Only).","Controls whether supervisor-level writes to read-only …","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","Read the current set of CR0 flags.","Read the current page fault linear address from the CR2 …","Read the current P4 table address from the CR3 register.","Read the current set of CR4 flags.","Read the current P4 table address from the CR3 register …","Read the current raw CR0 value.","Read the current page fault linear address from the CR2 …","Read the current P4 table address from the CR3 register","Read the current raw CR4 value.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Updates CR0 flags.","Updates CR4 flags.","Write CR0 flags.","Write a new P4 table address into the CR3 register.","Write CR4 flags.","Write a new P4 table address into the CR3 register.","Write raw CR0 flags.","Write raw CR4 flags.","Next instruction accesses one of the debug registers.","The condition for a hardware breakpoint.","The size of a hardware breakpoint.","Data reads or writes but not instruction fetches","Data writes","Debug Address Register","A valid debug address register number.","Debug Address Register","The debug address register number of <code>Dr0</code> (0).","Debug Address Register","The debug address register number of <code>Dr1</code> (1).","Debug Address Register","The debug address register number of <code>Dr2</code> (2).","Debug Address Register","The debug address register number of <code>Dr3</code> (3).","Debug Status Register (DR6).","Debug condition flags of the <code>Dr6</code> register.","Debug Control Register (DR7).","Debug control flags of the <code>Dr7</code> register.","A valid value of the <code>Dr7</code> debug register.","Enables debug register protection.","Breakpoint 0 is enabled for all tasks.","Breakpoint 1 is enabled for all tasks.","Breakpoint 2 is enabled for all tasks.","Breakpoint 3 is enabled for all tasks.","Enable detection of exact instruction causing a data …","Instruction execution","I/O reads or writes","Breakpoint 0 is enabled for the current task.","Breakpoint 1 is enabled for the current task.","Breakpoint 2 is enabled for the current task.","Breakpoint 3 is enabled for the current task.","Enable detection of exact instruction causing a data …","1 byte length","2 byte length","4 byte length","8 byte length","The corresponding <code>DebugAddressRegisterNumber</code>.","Enables advanced debugging of RTM transactional regions.","When <em>clear</em>, indicates a debug or breakpoint exception …","CPU is in single-step execution mode.","Task switch.","Breakpoint condition was detected.","Breakpoint condition 0 was detected.","Breakpoint condition 1 was detected.","Breakpoint condition 2 was detected.","Breakpoint condition 3 was detected.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the fields currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the condition field of a debug address register.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","Returns the <code>Dr7Flags</code> in this value.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Creates a new hardware breakpoint condition if <code>bits</code> is …","Creates a new hardware breakpoint size if <code>bits</code> is valid.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","Returns the number as a primitive type.","Returns the global breakpoint enable flag of the provided …","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified <code>Dr7Flags</code> in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns the local breakpoint enable flag of the provided …","","","","Creates a debug address register number if it is valid.","Creates a new hardware breakpoint size if <code>size</code> is valid.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","Reads the current breakpoint address.","","","","","Read the current set of DR6 flags.","Read the current set of DR7 flags.","Read the current raw DR6 value.","Read the current raw DR7 value.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified <code>Dr7Flags</code> in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Sets the condition field of a debug address register.","Inserts or removes the specified <code>Dr7Flags</code> depending on the …","Sets the size field of a debug address register.","Returns the size field of a debug address register.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified <code>Dr7Flags</code> in-place.","Returns the trap flag of the provided debug address …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Writes the provided breakpoint address.","","","","","Write DR7 value.","Write raw DR7 value.","Flags stored in IA32_U_CET and IA32_S_CET (Table-2-2 in …","The Extended Feature Enable Register.","Flags of the Extended Feature Enable Register.","Enable the <code>fxsave</code> and <code>fxrstor</code> instructions to execute …","FS.Base Model Specific Register.","GS.Base Model Specific Register.","Enable indirect branch tracking (ENDBR_EN)","Enable legacy treatment for indirect branch tracking …","Disable suppression of CET on legacy compatibility …","Enable no-track opcode prefix for indirect branch tracking …","Enable suppression of indirect branch tracking (SUPPRESS)","Is IBT waiting for a branch to return? (read-only, TRACKER)","KernelGsBase Model Specific Register.","Indicates that long mode is active.","Activates long mode, requires activating paging.","Enable certain limit checks in 64-bit mode.","Syscall Register: LSTAR","The underlying model specific register.","The underlying model specific register.","The underlying model specific register.","The underlying model specific register.","The underlying model specific register.","The underlying model specific register.","The underlying model specific register.","The underlying model specific register.","The underlying model specific register.","A model specific register.","Enables the no-execute page-protection feature.","IA32_S_CET: supervisor mode CET configuration","Enables SVM extensions.","Syscall Register: SFMASK","Enable shadow stack (SH_STK_EN)","Enable WRSS{D,Q}W instructions (WR_SHTK_EN)","Enables the <code>syscall</code> and <code>sysret</code> instructions.","Syscall Register: STAR","Changes how the <code>invlpg</code> instruction operates on TLB entries …","IA32_U_CET: user mode CET configuration","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","","Create an instance from a register.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","Read 64 bits msr register.","Read the current EFER flags.","Read the current FsBase register.","Read the current GsBase register.","Read the current KernelGsBase register.","Read the Ring 0 and Ring 3 segment bases. Returns","Read the current LStar register. This holds the target RIP …","Read to the SFMask register. The SFMASK register is used …","Read IA32_U_CET. Returns a tuple of the flags and the …","Read IA32_S_CET. Returns a tuple of the flags and the …","Read the current raw EFER flags.","Read the Ring 0 and Ring 3 segment bases. The remaining …","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Update EFER flags.","Write 64 bits to msr register.","Write the EFER flags, preserving reserved values.","Write a given virtual address to the FS.Base register.","Write a given virtual address to the GS.Base register.","Write a given virtual address to the KernelGsBase register.","Write the Ring 0 and Ring 3 segment bases. The remaining …","Write a given virtual address to the LStar register. This …","Write to the SFMask register. The SFMASK register is used …","Write IA32_U_CET.","Write IA32_S_CET.","Write the EFER flags.","Write the Ring 0 and Ring 3 segment bases. The remaining …","Denormal","Denormals are zeros","Denormal mask","Divide-by-zero","Divide-by-zero mask","Flush to zero","Invalid operation","Invalid operation mask","MXCSR register.","Overflow","Overflow mask","Precision","Precision mask","Toward negative infinity","Toward positive infinity","Toward zero (positive + negative)","Underflow","Underflow mask","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Return the default MXCSR value at reset, as documented in …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Returns the complement of this set of flags.","","Read the value of MXCSR.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Toggles the specified flags in-place.","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Write MXCSR.","Enable automatic alignment checking if CR0.AM is set. Only …","Set by hardware if last arithmetic operation generated a …","Set by hardware if last arithmetic operation generated a …","Determines the order in which strings are processed.","Processor feature identification flag.","Enable interrupts.","The high bit of the I/O Privilege Level field.","The low bit of the I/O Privilege Level field.","Used by <code>iret</code> in hardware task switch mode to determine if …","Set by hardware to indicate that the sign bit of the …","Set by hardware if last result has an even number of 1 …","Allows to restart an instruction following an instrucion …","The RFLAGS register.","Set by hardware if last arithmetic operation resulted in a …","Enable single-step mode for debugging.","Enable the virtual-8086 mode.","Virtual image of the INTERRUPT_FLAG bit.","Indicates that an external, maskable interrupt is pending.","Set by hardware if last arithmetic operation resulted in a …","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Returns the complement of this set of flags.","","Returns the current value of the RFLAGS register.","Returns the raw current value of the RFLAGS register.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Toggles the specified flags in-place.","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Writes the RFLAGS register, preserves reserved bits.","Writes the RFLAGS register.","","MSR containing the segment base. This MSR can be used to …","Code Segment","Data Segment","ES Segment","FS Segment","GS Segment","Can be used as a selector into a non-existent segment and …","Stack Segment","An x86 segment","An x86 segment which is actually used in 64-bit mode","Specifies which element to load into a segment from …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the current value of the segment register.","","","","","","","","Returns the GDT index.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a new SegmentSelector","","Reads the segment base address","","","Returns the requested privilege level.","Reload the segment register. Depending on the segment, …","Note this is special since we cannot directly move to <code>CS</code>; …","","","","","","Set the privilege level for this Segment selector.","Swap <code>KernelGsBase</code> MSR and <code>GsBase</code> MSR.","","","","","","","","","","","","","","","","","","","","","","Writes the segment base address","","","Enables AVX instructions and using the upper halves of the …","Enables MPX instructions and using the BNDCFGU and …","Enables MPX instructions and using the BND0-BND3 bound …","Enables AVX-512 instructions and using the upper ZMM …","Enables Lightweight Profiling extensions and managing LWP …","Enables using the PKRU register with <code>XSAVE</code>/<code>XRSTOR</code>.","Enables AVX-512 instructions and using the K0-K7 mask …","Enables using MXCSR and the XMM registers with <code>XSAVE</code>/<code>XRSTOR</code>…","Enables using the x87 FPU state with <code>XSAVE</code>/<code>XRSTOR</code>.","Extended feature enable mask register","Configuration flags of the XCr0 register.","Alias for <code>AVX</code>","Enables AVX-512 instructions and using the upper halves of …","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Returns the complement of this set of flags.","","Read the current set of XCR0 flags.","Read the current raw XCR0 value.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Write XCR0 flags.","Write raw XCR0 flags.","A struct describing a pointer to a descriptor table (GDT / …","Pointer to the memory region containing the DT.","","","","","Returns the argument unchanged.","Types for the Global Descriptor Table and segment …","Provides types for the Interrupt Descriptor Table and its …","Calls <code>U::from(self)</code>.","Size of the DT.","Abstractions for page tables and other paging related …","Traits for accessing I/O ports.","","","Provides a type for the task state segment structure.","","Set by the processor if this segment has been accessed. …","Available for use by the Operating System","Bits <code>0..=23</code> of the base field (ignored in 64-bit mode, …","Bits <code>24..=31</code> of the base field (ignored in 64-bit mode, …","For code segments, sets the segment as “conforming”, …","Use 32-bit (as opposed to 16-bit) operands. If <code>LONG_MODE</code> …","The DPL for this descriptor is Ring 3. In 64-bit mode, …","A 64-bit mode segment descriptor.","Flags for a GDT descriptor. Not all flags are valid for …","This flag must be set for code segments and unset for data …","Limit field is scaled by 4096 bytes. In 64-bit mode, …","A 64-bit mode global descriptor table (GDT).","A flat 32-bit kernel code segment","A 64-bit kernel code segment","A kernel data segment (64-bit or flat 32-bit)","Bits <code>0..=15</code> of the limit field (ignored in 64-bit mode)","Bits <code>16..=19</code> of the limit field (ignored in 64-bit mode)","Must be set for 64-bit code segments, unset otherwise.","Must be set for any segment, causes a segment not present …","","A system segment descriptor such as a LDT or TSS …","A flat 32-bit user code segment","A 64-bit user code segment","A user data segment (64-bit or flat 32-bit)","This flag must be set for user segments (in contrast to …","Descriptor for a code or data segment.","For 32-bit data segments, sets the segment as writable. …","Adds the given segment descriptor to the GDT, returning …","Returns the set containing all flags.","Get a reference to the internal table.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Forms a GDT from a slice of <code>u64</code>.","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Creates a segment descriptor for a 64-bit kernel code …","Creates a segment descriptor for a kernel data segment …","Loads the GDT in the CPU using the <code>lgdt</code> instruction. This …","Loads the GDT in the CPU using the <code>lgdt</code> instruction. This …","","Creates an empty GDT.","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Toggles the specified flags in-place.","","","","","","","Creates a TSS system descriptor for the given TSS.","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Creates a segment descriptor for a 64-bit ring 3 code …","Creates a segment descriptor for a ring 3 data segment …","","","","Alignment Check","Bound Range Exceeded","Breakpoint","If this flag is set, the memory access that caused the …","Control Protection Exception","Debug","The possible descriptor table values.","Device Not Available","A handler function that must not return, e.g. for a …","A handler function with an error code that must not …","Error during Division","Double Fault","An Interrupt Descriptor Table entry.","Represents the options field of an IDT entry.","This structure defines the CPU-internal exception vector …","Global Descriptor Table.","A general handler function for an interrupt or an …","General Protection Fault","A handler function for an interrupt or an exception …","A handler function for an exception that pushes an error …","Hypervisor Injection (AMD-only)","If this flag is set, it indicates that the access that …","Interrupt Descriptor Table.","An Interrupt Descriptor Table with 256 entries.","Wrapper type for the interrupt stack frame pushed by the …","Represents the interrupt stack frame pushed by the CPU on …","Invalid Opcode","Invalid TSS","Logical Descriptor Table.","If this flag is set, the page fault is a result of the …","Machine Check","Non-Maskable Interrupt","Overflow","If this flag is set, it indicates that the page fault was …","If this flag is set, the page fault was caused by a …","Page Fault","Describes an page fault error code.","A page fault handler function that pushes a page fault …","If this flag is set, it indicates that the page fault is a …","If this flag is set, it indicates that the page fault was …","If this flag is set, it indicates that the page fault was …","Security Exception","Segment Not Present","Describes an error code referencing a segment selector.","SIMD Floating-Point Exception","Stack Fault","If this flag is set, an access in user mode (CPL=3) caused …","Virtualization Exception (Intel-only)","VMM Communication (AMD-only)","x87 Floating-Point Exception","An alignment check exception (<code>#AC</code>) occurs when an …","Returns the set containing all flags.","Gives mutable access to the contents of the interrupt …","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","A bound-range exception (<code>#BR</code>) exception can occur as a …","A breakpoint (<code>#BP</code>) exception occurs when an <code>INT3</code> …","","","","","","","","","","The code segment selector, padded with zeros.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","A #CP exception is generated when shadow stacks are …","The flags register before the interrupt handler was …","When the debug-exception mechanism is enabled, a <code>#DB</code> …","","The descriptor table this error code refers to.","A device not available exception (<code>#NM</code>) occurs under any of …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Let the CPU disable hardware interrupts when the handler …","A divide error (<code>#DE</code>) occurs when the denominator of a DIV …","A double fault (<code>#DF</code>) exception can occur when a second …","Returns an empty set of flags.","","","","","","","","If true, indicates that the exception occurred during …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","A general protection fault (<code>#GP</code>) can occur in various …","Returns the virtual address of this IDT entry’s handler …","","","","The Hypervisor Injection Exception (<code>#HV</code>) is injected by a …","Returns the IDT entry with the specified index.","The index of the selector which caused the error.","Returns a mutable reference to the IDT entry with the …","Inserts the specified flags in-place.","This value points to the instruction that should be …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","An invalid opcode exception (<code>#UD</code>) occurs when an attempt …","An invalid TSS exception (<code>#TS</code>) occurs only as a result of …","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","If true, the #SS or #GP has returned zero as opposed to a …","Loads the IDT in the CPU using the <code>lidt</code> command.","Loads the IDT in the CPU using the <code>lidt</code> command.","The machine check exception (<code>#MC</code>) is model specific. …","Creates a non-present IDT entry (but sets the must-be-one …","","","","Creates a new IDT filled with non-present entries.","Create a SelectorErrorCode. Returns None is any of the …","Create a new SelectorErrorCode dropping any reserved bits …","An non maskable interrupt exception (NMI) occurs as a …","Returns the complement of this set of flags.","An overflow exception (<code>#OF</code>) occurs as a result of …","A page fault (<code>#PF</code>) can occur during a memory access in any …","","Removes the specified flags in-place.","Resets all entries of this IDT in place.","The Security Exception (<code>#SX</code>) signals security-sensitive …","An segment-not-present exception (<code>#NP</code>) occurs when an …","Inserts or removes the specified flags depending on the …","Set the handler address for the IDT entry and sets the …","Set the handler function for the IDT entry and sets the …","Set the handler function for the IDT entry and sets the …","Set the handler function for the IDT entry and sets the …","Set the handler function for the IDT entry and sets the …","Set the handler function for the IDT entry and sets the …","Set or reset the preset bit.","Set the required privilege level (DPL) for invoking the …","Assigns a Interrupt Stack Table (IST) stack to this …","The SIMD Floating-Point Exception (<code>#XF</code>) is used to handle …","Returns slice of IDT entries with the specified range.","Returns a mutable slice of IDT entries with the specified …","The stack pointer at the time of the interrupt.","The stack segment descriptor at the time of the interrupt …","An stack segment exception (<code>#SS</code>) can occur in the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","vector nr. 20","The VMM Communication Exception (<code>#VC</code>) is always generated …","The x87 Floating-Point Exception-Pending exception (<code>#MF</code>) …","A trait for types that can allocate a frame of memory.","A trait for types that can deallocate a frame of memory.","","","","","","","","","","","","","","","","Allocate a frame of the appropriate size and return it if …","Deallocate the given unused frame.","Abstractions for default-sized and huge physical memory …","Abstractions for reading and modifying the mapping of …","Abstractions for default-sized and huge virtual memory …","Abstractions for page tables and page table entries.","A physical memory frame.","An range of physical memory frames, exclusive the upper …","An range of physical memory frames, inclusive the upper …","","","","","","","","","","","","","Returns the frame that contains the given physical address.","The end of the range, exclusive.","The start of the range, inclusive.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the frame that starts at the given virtual address.","Returns the frame that starts at the given virtual address.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns whether the range contains no frames.","Returns whether the range contains no frames.","","","","","","","Returns a range of frames, exclusive <code>end</code>.","Returns a range of frames, inclusive <code>end</code>.","Returns the size the frame (4KB, 2MB or 1GB).","The start of the range, inclusive.","The start of the range, inclusive.","Returns the start address of the frame.","","","","","","","","","","","","","Provides methods for cleaning up unused entries.","An error indicating that an <code>update_flags</code> call failed.","An additional frame was needed for the mapping process, …","The page table entry for the given virtual address points …","The page table entry for the given page points to an …","The page table entry for the given page points to an …","The given page table was not suitable to create a …","This error is returned from <code>map_to</code> and similar methods.","The virtual address is mapped to a physical frame.","Represents a physical frame mapped in a page table.","A Mapper implementation that relies on a PhysAddr to …","A trait for common page table operations on pages of size <code>S</code>…","An empty convencience trait that requires the <code>Mapper</code> trait …","This type represents a page whose mapping has changed in …","This type represents a change of a page table requiring a …","The given page table was not active on the CPU.","The given virtual address is not mapped to a physical …","The given page table was not at an recursive address.","A Mapper implementation that requires that the complete …","The given page is already mapped to a physical frame.","The given page is not mapped to a physical frame.","The given page is not mapped to a physical frame.","The given page is not mapped to a physical frame.","Provides a virtual address mapping for physical page table …","An upper level page table entry has the <code>HUGE_PAGE</code> flag …","An upper level page table entry has the <code>HUGE_PAGE</code> flag …","An upper level page table entry has the <code>HUGE_PAGE</code> flag …","An upper level page table entry has the <code>HUGE_PAGE</code> flag …","A recursive page table is a last level page table with an …","The virtual address is mapped to a “huge” 1GiB frame.","The virtual address is mapped to a “large” 2MiB frame.","The virtual address is mapped to a 4KiB frame.","Provides methods for translating virtual addresses.","An error indicating that an <code>translate</code> call failed.","The return value of the <code>Translate::translate</code> function.","An error indicating that an <code>unmap</code> call failed.","","","","","","","","","","","","","","","","","","","","","","","","","Remove all empty P1-P3 tables","","","","Remove all empty P1-P3 tables in a certain range","","","","","Flush the page from the TLB to ensure that the newest …","Flush all pages from the TLB to ensure that the newest …","","","","","","","","","","","","","","Translate the given physical frame to a virtual page table …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Maps the given frame to the virtual page with the same …","Don’t flush the TLB and silence the “must be used” …","Don’t flush the TLB and silence the “must be used” …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a mutable reference to the wrapped level 4 …","Returns a mutable reference to the wrapped level 4 …","Returns a mutable reference to the wrapped level 4 …","Creates a new mapping in the page table.","Creates a new mapping in the page table.","","","","","","","","","","Creates a new <code>MappedPageTable</code> that uses the passed …","Creates a new <code>OffsetPageTable</code> that uses the given offset …","Creates a new RecursivePageTable from the passed level 4 …","Create a new flush promise","Create a new flush promise","Creates a new RecursivePageTable without performing any …","Returns the <code>PageTableFrameMapping</code> used for converting …","Returns the offset used for converting virtual to physical …","Set the flags of an existing page table level 2 entry","","","","","","","","","","Set the flags of an existing page table level 3 entry","","","","","","","","","","Set the flags of an existing page level 4 table entry","","","","","","","","","","Returns the size the frame (4KB, 2MB or 1GB).","Returns the start address of the frame.","Return the frame that the given virtual address is mapped …","","","","Translates the given virtual address to the physical …","Return the frame that the specified page is mapped to.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Removes a mapping from the page table and returns the …","","","","","","","","","","Updates the flags of an existing mapping.","","","","","","","","","","","","","","","","The entry flags in the lowest-level page table.","The mapped frame.","The offset whithin the mapped frame.","","The given address was not sufficiently aligned.","This trait is implemented for 4KiB and 2MiB pages, but not …","A virtual memory page.","A range of pages with exclusive upper bound.","A range of pages with inclusive upper bound.","Trait for abstracting over the three possible page sizes …","The page size in bytes.","The page size in bytes.","A string representation of the page size for debug output.","A “giant” 1GiB page.","A “huge” 2MiB page.","A standard 4KiB page.","","","Converts the range of 2MiB pages to a range of 4KiB pages.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the page that contains the given virtual address.","The end of the range, exclusive.","The end of the range, inclusive.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the 4KiB memory page with the specified page table …","Returns the 1GiB memory page with the specified page table …","Returns the 2MiB memory page with the specified page table …","Returns the page that starts at the given virtual address.","Returns the page that starts at the given virtual address.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns wether this range contains no pages.","Returns wether this range contains no pages.","","","","","","Returns the level 1 page table index of this page.","Returns the level 2 page table index of this page.","Returns the level 3 page table index of this page.","Returns the level 4 page table index of this page.","Returns the table index of this page at the specified …","","","","","Returns a range of pages, exclusive <code>end</code>.","Returns a range of pages, inclusive <code>end</code>.","Returns the size the page (4KB, 2MB or 1GB).","The start of the range, inclusive.","The start of the range, inclusive.","Returns the start address of the page.","","","","","","","","","","","","","","","","","","","","","","","","","","Set by the CPU when the mapped frame or page table is …","Available to the OS, can be used to store additional data, …","Available to the OS, can be used to store additional data, …","Available to the OS, can be used to store additional data, …","Available to the OS, can be used to store additional data, …","Available to the OS, can be used to store additional data, …","Available to the OS, can be used to store additional data, …","Available to the OS, can be used to store additional data, …","Available to the OS, can be used to store additional data, …","Available to the OS, can be used to store additional data, …","Available to the OS, can be used to store additional data, …","Available to the OS, can be used to store additional data, …","Available to the OS, can be used to store additional data, …","Available to the OS, can be used to store additional data, …","Available to the OS, can be used to store additional data, …","Set by the CPU on a write to the mapped frame.","Represents the level for a page-map level-4.","The error returned by the <code>PageTableEntry::frame</code> method.","The entry does not have the <code>PRESENT</code> flag set, so it isn’…","Indicates that the mapping is present in all address …","Specifies that the entry maps a huge frame instead of a …","The entry does have the <code>HUGE_PAGE</code> flag set. The <code>frame</code> …","Disables caching for the pointed entry is cacheable.","Forbid code execution from the mapped frames.","Represents the level for a page table.","Specifies whether the mapped frame or page table is loaded …","A 12-bit offset into a 4KiB Page.","Represents a page table.","A 64-bit page table entry.","Possible flags for a page table entry.","A 9-bit index into a page table.","A value between 1 and 4.","Represents the level for a page-directory pointer.","Represents the level for a page directory.","Controls whether accesses from userspace (i.e. ring 3) are …","Controls whether writes to the mapped frames are allowed.","If this bit is set, a “write-through” policy is used …","Returns the physical address mapped by this entry, might …","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns the alignment for the address space described by …","","","","","","","Returns the flags of this entry.","","","","","","","","","","","","Returns the physical frame mapped by this entry.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns whether this entry is zero.","Returns an iterator over the entries of the page table.","Returns an iterator that allows modifying the entries of …","","","","Creates an unused page table entry.","Creates an empty page table.","Creates a new index from the given <code>u16</code>. Panics if the …","Creates a new offset from the given <code>u16</code>. Panics if the …","Creates a new index from the given <code>u16</code>. Throws away bits …","Creates a new offset from the given <code>u16</code>. Throws away bits …","Returns the next lower level or <code>None</code> for level 1","Returns the complement of this set of flags.","","","","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Map the entry to the specified physical address with the …","Sets the flags of this entry.","Map the entry to the specified physical frame with the …","Sets this entry to zero.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the alignment for the address space described by a …","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Clears all entries.","A helper trait that implements the read port operation.","A helper trait that implements the write port operation.","Reads a <code>Self</code> value from the given port.","Writes a <code>Self</code> value to the given port.","In 64-bit mode the TSS holds information that is not …","","","","","Returns the argument unchanged.","The full 64-bit canonical forms of the interrupt stack …","Calls <code>U::from(self)</code>.","The 16-bit offset to the I/O permission bit map from the …","Creates a new TSS with zeroed privilege and interrupt …","The full 64-bit canonical forms of the stack pointers …","","",""],"i":[0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,1,0,0,0,0,1,1,1,2,3,0,0,0,0,4,4,5,5,4,4,5,5,0,4,5,0,4,5,4,4,4,5,4,2,3,4,5,2,3,4,5,4,5,4,5,4,5,2,3,4,4,4,4,4,4,5,5,5,5,5,5,4,2,3,4,5,4,4,5,2,3,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,4,4,4,4,4,4,5,4,4,4,4,5,5,5,4,4,5,5,2,3,4,5,2,3,4,5,4,5,2,3,4,5,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,8,9,6,7,8,9,6,6,6,7,8,9,6,7,8,9,6,7,8,9,6,6,6,7,8,9,6,7,8,9,6,7,8,9,6,0,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,11,0,0,11,11,12,11,12,12,12,12,0,0,0,11,12,11,12,12,11,12,12,12,12,11,12,11,12,11,12,12,13,14,13,0,0,0,0,0,0,0,0,0,0,0,0,15,15,16,0,0,0,0,0,0,0,16,15,15,0,0,16,16,16,16,15,15,15,16,16,16,16,17,17,16,15,16,16,16,15,16,16,16,16,16,16,16,15,16,16,16,16,15,15,17,16,15,17,16,15,17,16,15,17,16,15,17,16,15,17,16,15,17,16,15,17,16,18,15,19,20,17,21,16,18,15,19,20,17,21,16,15,17,16,15,17,16,15,17,16,15,17,16,15,17,16,15,17,16,15,17,16,15,17,16,18,15,15,15,15,15,19,20,17,17,17,17,17,21,16,16,16,16,16,18,15,19,20,17,21,16,15,17,16,15,17,16,15,17,16,15,17,16,15,17,16,15,17,16,15,17,16,15,17,16,18,15,19,20,17,21,16,15,17,16,15,17,16,15,17,16,15,17,16,15,17,16,18,19,20,21,20,18,19,20,21,15,17,16,15,17,16,15,17,16,15,17,16,15,17,16,15,17,16,18,15,19,20,17,21,16,18,15,19,20,17,21,16,18,15,19,20,17,21,16,15,17,16,18,21,18,20,21,20,18,21,22,0,0,23,23,0,0,0,24,0,24,0,24,0,24,0,0,0,0,0,25,25,25,25,25,25,23,23,25,25,25,25,25,26,26,26,26,27,25,22,22,22,22,22,22,22,22,22,25,22,25,22,25,22,25,22,25,22,25,28,22,25,22,25,29,30,31,32,24,33,22,25,23,26,28,34,29,30,31,32,24,33,22,25,23,26,28,34,24,22,25,23,26,28,22,25,22,25,28,22,25,22,25,22,25,24,22,25,23,26,28,22,25,28,29,30,31,32,24,33,22,22,22,22,22,25,25,25,25,25,23,26,28,34,29,30,31,32,24,33,22,25,23,26,28,28,34,22,25,23,26,28,22,25,28,22,25,28,22,25,24,25,22,25,22,25,28,22,25,22,25,29,30,31,32,24,33,22,25,23,26,28,34,22,25,22,25,25,22,25,28,24,26,22,25,22,25,27,29,30,31,32,33,34,33,34,22,25,28,22,25,28,28,28,28,22,25,22,25,22,25,22,25,28,22,29,30,31,32,24,33,22,25,23,26,28,34,29,30,31,32,24,33,22,25,23,26,28,34,29,30,31,32,24,33,22,25,23,26,28,34,22,25,27,29,30,31,32,34,34,0,0,0,35,0,0,36,36,36,36,36,36,0,35,35,35,0,37,38,39,40,41,42,43,44,45,0,35,0,35,0,36,36,35,0,35,0,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,46,37,38,39,40,41,42,43,44,45,35,36,46,37,38,39,40,41,42,43,44,45,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,46,37,38,39,40,41,42,43,44,45,35,35,35,35,35,36,36,36,36,36,46,37,38,39,40,41,42,43,44,45,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,46,37,38,39,40,41,42,43,44,45,35,36,35,36,35,36,35,36,46,35,36,35,36,46,37,38,39,40,41,42,43,44,45,37,41,35,36,35,36,35,36,35,36,35,36,35,36,46,37,38,39,40,41,42,43,44,45,35,36,46,37,38,39,40,41,42,43,44,45,35,36,46,37,38,39,40,41,42,43,44,45,35,36,35,36,37,46,37,38,39,40,41,42,43,44,45,37,41,47,47,47,47,47,47,47,47,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,47,47,47,47,47,47,47,47,47,47,0,48,48,48,48,48,48,48,48,48,48,48,48,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,0,48,48,48,48,48,48,48,48,48,48,0,0,49,50,0,0,0,0,0,49,0,0,0,0,49,51,52,53,54,55,56,49,51,52,53,54,55,56,49,49,49,49,51,52,53,54,55,56,49,51,52,53,54,55,56,57,51,52,53,54,55,56,49,49,49,51,52,53,54,55,56,49,49,49,50,55,56,49,57,51,52,53,54,55,56,49,56,49,51,52,53,54,55,56,49,51,52,53,54,55,56,49,51,52,53,54,55,56,50,55,56,58,58,58,58,58,58,58,58,58,0,0,58,58,58,58,58,58,58,58,58,58,59,58,59,58,58,58,58,58,58,58,58,58,59,58,58,58,58,58,59,58,58,58,58,58,58,58,58,58,59,58,58,58,58,58,58,59,59,58,58,58,58,58,58,59,58,59,58,59,58,58,59,59,0,60,60,60,60,60,60,0,0,60,60,0,0,60,60,0,60,61,61,61,61,61,61,61,0,0,61,61,0,61,61,61,61,61,61,61,0,62,61,61,61,61,62,61,63,61,63,61,61,61,61,61,61,61,63,62,61,63,62,61,63,62,61,61,61,61,61,61,61,61,63,62,61,61,61,61,61,63,62,61,61,61,61,61,63,61,61,61,61,63,62,61,61,61,62,62,63,63,61,63,61,61,61,61,61,61,61,61,63,62,61,63,62,61,62,63,62,61,61,62,62,64,65,65,66,66,66,67,66,66,0,66,0,0,66,66,0,0,0,68,0,66,0,0,66,67,68,0,0,0,66,66,68,67,66,66,66,67,67,66,0,0,67,67,67,66,66,0,66,66,67,66,66,66,69,67,70,67,67,67,67,67,67,67,70,69,71,72,73,67,74,68,66,70,69,71,72,73,67,74,68,66,69,69,69,71,72,73,67,74,68,66,67,73,67,67,69,73,69,70,74,69,67,72,69,69,67,71,72,67,74,68,66,67,74,70,69,71,72,73,67,67,67,67,67,74,68,66,70,69,71,72,73,67,74,68,66,67,67,67,67,69,71,67,74,68,69,69,74,69,67,73,67,67,70,69,71,72,73,67,74,68,66,69,69,67,67,74,69,69,69,71,72,67,74,69,74,74,69,67,69,69,67,67,69,69,69,67,71,71,71,71,71,71,72,72,72,69,69,69,73,73,69,67,67,67,67,70,69,71,72,73,67,74,68,66,70,69,71,72,73,67,74,68,66,70,69,71,72,73,67,74,68,66,67,69,69,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,76,0,0,0,0,0,0,0,77,77,77,78,79,77,78,79,77,78,79,77,77,78,79,77,78,79,77,78,79,77,78,79,77,77,77,78,79,77,78,79,78,79,78,79,77,78,79,78,79,77,77,77,77,78,79,77,77,77,77,77,78,79,77,78,79,77,78,79,0,0,80,81,82,83,0,0,81,0,0,0,0,0,0,84,81,84,0,80,82,85,83,0,80,82,85,83,0,86,86,86,0,0,0,0,87,88,89,84,81,86,90,91,80,82,85,83,87,88,89,84,81,86,90,91,80,82,85,83,92,87,88,89,92,87,88,89,91,90,91,87,88,89,84,84,81,86,90,91,80,82,85,83,93,87,88,89,84,81,86,90,91,80,82,85,83,94,90,91,87,88,89,84,81,86,90,91,80,82,85,83,87,88,89,94,94,87,87,87,88,88,88,89,89,89,87,88,89,90,91,89,87,88,94,87,87,87,88,88,88,89,89,89,94,87,87,87,88,88,88,89,89,89,94,87,87,87,88,88,88,89,89,89,86,86,95,87,88,89,95,94,87,87,87,88,88,88,89,89,89,87,88,89,84,81,86,90,91,80,82,85,83,87,88,89,84,81,86,90,91,80,82,85,83,87,88,89,84,81,86,90,91,80,82,85,83,94,87,87,87,88,88,88,89,89,89,94,87,87,87,88,88,88,89,89,89,96,97,98,99,100,101,102,102,102,103,0,0,0,0,0,0,104,105,104,0,0,0,105,105,106,105,107,108,109,105,106,110,111,107,108,109,105,106,110,111,107,108,109,105,106,110,107,108,109,105,105,106,110,107,108,109,105,106,110,107,108,109,105,106,110,111,111,105,107,108,109,105,106,110,111,105,105,105,105,105,105,106,110,107,108,109,105,106,110,111,106,110,106,110,105,106,110,106,110,105,105,105,105,105,107,108,109,105,105,105,105,106,110,105,105,105,105,105,107,108,109,105,106,110,111,107,108,109,105,106,110,111,107,108,109,105,106,110,111,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,113,0,114,112,112,114,112,112,113,112,0,0,0,0,0,0,113,113,112,112,112,115,112,112,112,112,112,112,112,112,114,115,112,116,117,118,113,114,115,112,116,117,118,113,114,115,112,116,117,118,113,112,117,118,113,112,112,116,112,112,113,114,112,117,118,113,112,115,114,115,112,112,112,112,112,116,117,118,113,115,114,115,112,116,117,118,113,112,112,112,112,112,117,118,113,116,116,116,116,112,112,112,114,115,112,116,117,118,113,112,112,115,116,116,112,117,118,115,116,117,118,117,118,113,112,112,117,118,113,112,112,115,115,115,115,112,112,112,113,112,114,115,112,116,117,118,113,114,115,112,116,117,118,113,114,115,112,116,117,118,113,112,116,0,0,119,120,0,121,121,121,121,121,121,121,121,121,121,121,121,121],"f":[null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["privilegelevel",4]],["privilegelevel",4]],[[["privilegelevel",4],["privilegelevel",4]],["bool",0]],[[["privilegelevel",4],["formatter",3]],["result",6]],[[]],[[["u16",0]],["privilegelevel",4]],[[["privilegelevel",4],["",0]]],null,[[]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["virtaddr",3],["u64",0]]],[[["virtaddr",3],["usize",0]]],[[["physaddr",3],["usize",0]]],[[["physaddr",3],["u64",0]]],[[["virtaddr",3],["u64",0]]],[[["virtaddr",3],["usize",0]]],[[["physaddr",3],["usize",0]]],[[["physaddr",3],["u64",0]]],[[["u64",0],["u64",0]],["u64",0]],[[["virtaddr",3]],["virtaddr",3]],[[["physaddr",3]],["physaddr",3]],[[["u64",0],["u64",0]],["u64",0]],[[["virtaddr",3]],["virtaddr",3]],[[["physaddr",3]],["physaddr",3]],[[["virtaddr",3]],["",0]],[[["virtaddr",3]],["",0]],[[["virtaddr",3]],["u64",0]],[[["physaddr",3]],["u64",0]],[[["virtaddr",3],["usize",0]],["option",4,[["virtaddr",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["virtaddr",3]],["virtaddr",3]],[[["physaddr",3]],["physaddr",3]],[[["virtaddr",3],["virtaddr",3]],["ordering",4]],[[["physaddr",3],["physaddr",3]],["ordering",4]],[[["virtaddr",3],["virtaddr",3]],["bool",0]],[[["physaddr",3],["physaddr",3]],["bool",0]],[[["virtaddrnotvalid",3],["formatter",3]],["result",6]],[[["physaddrnotvalid",3],["formatter",3]],["result",6]],[[["virtaddr",3],["formatter",3]],["result",6]],[[["virtaddr",3],["formatter",3]],["result",6]],[[["virtaddr",3],["formatter",3]],["result",6]],[[["virtaddr",3],["formatter",3]],["result",6]],[[["virtaddr",3],["formatter",3]],["result",6]],[[["virtaddr",3],["formatter",3]],["result",6]],[[["physaddr",3],["formatter",3]],["result",6]],[[["physaddr",3],["formatter",3]],["result",6]],[[["physaddr",3],["formatter",3]],["result",6]],[[["physaddr",3],["formatter",3]],["result",6]],[[["physaddr",3],["formatter",3]],["result",6]],[[["physaddr",3],["formatter",3]],["result",6]],[[["virtaddr",3],["usize",0]],["option",4,[["virtaddr",3]]]],[[]],[[]],[[]],[[]],[[["",0]],["virtaddr",3]],[[["virtaddr",3],["",0]]],[[["physaddr",3],["",0]]],[[]],[[]],[[]],[[]],[[["virtaddr",3]],["bool",0]],[[["physaddr",3]],["bool",0]],[[["virtaddr",3]],["bool",0]],[[["physaddr",3]],["bool",0]],[[["virtaddr",3],["virtaddr",3]],["bool",0]],[[["physaddr",3],["physaddr",3]],["bool",0]],[[["u64",0]],["virtaddr",3]],[[["u64",0]],["physaddr",3]],[[["u64",0]],["virtaddr",3]],[[["u64",0]],["physaddr",3]],[[["u64",0]],["virtaddr",3]],[[["u64",0]],["physaddr",3]],[[["virtaddr",3]],["pagetableindex",3]],[[["virtaddr",3]],["pagetableindex",3]],[[["virtaddr",3]],["pagetableindex",3]],[[["virtaddr",3]],["pagetableindex",3]],[[["virtaddr",3]],["pageoffset",3]],[[["virtaddr",3],["pagetablelevel",4]],["pagetableindex",3]],[[["virtaddr",3],["virtaddr",3]],["option",4,[["ordering",4]]]],[[["physaddr",3],["physaddr",3]],["option",4,[["ordering",4]]]],[[["virtaddr",3],["virtaddr",3]],["option",4,[["usize",0]]]],[[["virtaddr",3],["virtaddr",3]]],[[["virtaddr",3],["u64",0]]],[[["virtaddr",3],["usize",0]]],[[["physaddr",3],["usize",0]]],[[["physaddr",3],["physaddr",3]]],[[["physaddr",3],["u64",0]]],[[["virtaddr",3],["u64",0]]],[[["virtaddr",3],["usize",0]]],[[["physaddr",3],["usize",0]]],[[["physaddr",3],["u64",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u64",0]],["result",4,[["virtaddr",3],["virtaddrnotvalid",3]]]],[[["u64",0]],["result",4,[["physaddr",3],["physaddrnotvalid",3]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["virtaddr",3]],[[],["physaddr",3]],[[]],[[]],null,[[]],null,null,[[],["virtaddr",3]],null,null,null,[[],["bool",0]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["portgeneric",3]],["portgeneric",3]],[[["portgeneric",3],["portgeneric",3]],["bool",0]],[[["portgeneric",3,[["access",8]]],["formatter",3]],["result",6]],[[["readonlyaccess",3],["formatter",3]],["result",6]],[[["writeonlyaccess",3],["formatter",3]],["result",6]],[[["readwriteaccess",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u16",0]],["portgeneric",3]],[[["portgeneric",3,[["portread",8],["portreadaccess",8]]]],["portread",8]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["portgeneric",3,[["portwrite",8],["portwriteaccess",8]]],["portwrite",8]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["rdrand",3]],["rdrand",3]],[[["rdrand",3],["formatter",3]],["result",6]],[[]],[[["rdrand",3]],["option",4,[["u16",0]]]],[[["rdrand",3]],["option",4,[["u32",0]]]],[[["rdrand",3]],["option",4,[["u64",0]]]],[[]],[[],["option",4,[["rdrand",3]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,[[],["segmentselector",3]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[],["u64",0]],[[],["u64",0]],[[["segmentselector",3]]],[[]],[[["u64",0]]],[[["u64",0]]],null,[[["descriptortablepointer",3]]],[[["descriptortablepointer",3]]],[[["segmentselector",3]]],[[],["descriptortablepointer",3]],[[],["descriptortablepointer",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["pcid",3]],["pcid",3]],[[["pcid",3],["pcid",3]],["ordering",4]],[[["pcid",3],["pcid",3]],["bool",0]],[[["virtaddr",3]]],[[]],[[["invpicdcommand",4]]],[[["invpicdcommand",4],["formatter",3]],["result",6]],[[["pcid",3],["formatter",3]],["result",6]],[[]],[[]],[[["pcid",3],["",0]]],[[]],[[]],[[["pcid",3],["pcid",3]],["bool",0]],[[["u16",0]],["result",4,[["pcid",3],["str",0]]]],[[["pcid",3],["pcid",3]],["option",4,[["ordering",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["pcid",3]],["u16",0]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["cr0flags",3]],[[],["cr3flags",3]],[[],["cr4flags",3]],[[["cr0flags",3],["cr0flags",3]],["cr0flags",3]],[[["cr3flags",3],["cr3flags",3]],["cr3flags",3]],[[["cr4flags",3],["cr4flags",3]],["cr4flags",3]],[[["cr0flags",3],["cr0flags",3]]],[[["cr3flags",3],["cr3flags",3]]],[[["cr4flags",3],["cr4flags",3]]],[[["cr0flags",3],["cr0flags",3]],["cr0flags",3]],[[["cr3flags",3],["cr3flags",3]],["cr3flags",3]],[[["cr4flags",3],["cr4flags",3]],["cr4flags",3]],[[["cr0flags",3],["cr0flags",3]]],[[["cr3flags",3],["cr3flags",3]]],[[["cr4flags",3],["cr4flags",3]]],[[["cr0flags",3]],["u64",0]],[[["cr3flags",3]],["u64",0]],[[["cr4flags",3]],["u64",0]],[[["cr0flags",3],["cr0flags",3]],["cr0flags",3]],[[["cr3flags",3],["cr3flags",3]],["cr3flags",3]],[[["cr4flags",3],["cr4flags",3]],["cr4flags",3]],[[["cr0flags",3],["cr0flags",3]]],[[["cr3flags",3],["cr3flags",3]]],[[["cr4flags",3],["cr4flags",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["cr0flags",3]],["cr0flags",3]],[[["cr3flags",3]],["cr3flags",3]],[[["cr4flags",3]],["cr4flags",3]],[[["cr0flags",3],["cr0flags",3]],["ordering",4]],[[["cr3flags",3],["cr3flags",3]],["ordering",4]],[[["cr4flags",3],["cr4flags",3]],["ordering",4]],[[["cr0flags",3]],["cr0flags",3]],[[["cr3flags",3]],["cr3flags",3]],[[["cr4flags",3]],["cr4flags",3]],[[["cr0flags",3],["cr0flags",3]],["bool",0]],[[["cr3flags",3],["cr3flags",3]],["bool",0]],[[["cr4flags",3],["cr4flags",3]],["bool",0]],[[["cr0flags",3],["cr0flags",3]],["cr0flags",3]],[[["cr3flags",3],["cr3flags",3]],["cr3flags",3]],[[["cr4flags",3],["cr4flags",3]],["cr4flags",3]],[[],["cr0flags",3]],[[],["cr3flags",3]],[[],["cr4flags",3]],[[["cr0flags",3],["cr0flags",3]],["bool",0]],[[["cr3flags",3],["cr3flags",3]],["bool",0]],[[["cr4flags",3],["cr4flags",3]],["bool",0]],[[["cr0flags",3],["intoiterator",8]]],[[["cr3flags",3],["intoiterator",8]]],[[["cr4flags",3],["intoiterator",8]]],[[["cr0",3],["formatter",3]],["result",6]],[[["cr0flags",3],["formatter",3]],["result",6]],[[["cr0flags",3],["formatter",3]],["result",6]],[[["cr0flags",3],["formatter",3]],["result",6]],[[["cr0flags",3],["formatter",3]],["result",6]],[[["cr0flags",3],["formatter",3]],["result",6]],[[["cr2",3],["formatter",3]],["result",6]],[[["cr3",3],["formatter",3]],["result",6]],[[["cr3flags",3],["formatter",3]],["result",6]],[[["cr3flags",3],["formatter",3]],["result",6]],[[["cr3flags",3],["formatter",3]],["result",6]],[[["cr3flags",3],["formatter",3]],["result",6]],[[["cr3flags",3],["formatter",3]],["result",6]],[[["cr4",3],["formatter",3]],["result",6]],[[["cr4flags",3],["formatter",3]],["result",6]],[[["cr4flags",3],["formatter",3]],["result",6]],[[["cr4flags",3],["formatter",3]],["result",6]],[[["cr4flags",3],["formatter",3]],["result",6]],[[["cr4flags",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",0]],["option",4,[["cr0flags",3]]]],[[["u64",0]],["option",4,[["cr3flags",3]]]],[[["u64",0]],["option",4,[["cr4flags",3]]]],[[["u64",0]],["cr0flags",3]],[[["u64",0]],["cr3flags",3]],[[["u64",0]],["cr4flags",3]],[[["u64",0]],["cr0flags",3]],[[["u64",0]],["cr3flags",3]],[[["u64",0]],["cr4flags",3]],[[["intoiterator",8]],["cr0flags",3]],[[["intoiterator",8]],["cr3flags",3]],[[["intoiterator",8]],["cr4flags",3]],[[["cr0flags",3],["",0]]],[[["cr3flags",3],["",0]]],[[["cr4flags",3],["",0]]],[[["cr0flags",3],["cr0flags",3]]],[[["cr3flags",3],["cr3flags",3]]],[[["cr4flags",3],["cr4flags",3]]],[[["cr0flags",3],["cr0flags",3]],["cr0flags",3]],[[["cr3flags",3],["cr3flags",3]],["cr3flags",3]],[[["cr4flags",3],["cr4flags",3]],["cr4flags",3]],[[["cr0flags",3],["cr0flags",3]],["bool",0]],[[["cr3flags",3],["cr3flags",3]],["bool",0]],[[["cr4flags",3],["cr4flags",3]],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["cr0flags",3]],["bool",0]],[[["cr3flags",3]],["bool",0]],[[["cr4flags",3]],["bool",0]],[[["cr0flags",3]],["bool",0]],[[["cr3flags",3]],["bool",0]],[[["cr4flags",3]],["bool",0]],[[["cr0flags",3],["cr0flags",3]],["bool",0]],[[["cr3flags",3],["cr3flags",3]],["bool",0]],[[["cr4flags",3],["cr4flags",3]],["bool",0]],[[["cr0flags",3]],["cr0flags",3]],[[["cr3flags",3]],["cr3flags",3]],[[["cr4flags",3]],["cr4flags",3]],[[["cr0flags",3],["cr0flags",3]],["option",4,[["ordering",4]]]],[[["cr3flags",3],["cr3flags",3]],["option",4,[["ordering",4]]]],[[["cr4flags",3],["cr4flags",3]],["option",4,[["ordering",4]]]],[[],["cr0flags",3]],[[],["virtaddr",3]],[[]],[[],["cr4flags",3]],[[]],[[],["u64",0]],[[],["u64",0]],[[]],[[],["u64",0]],[[["cr0flags",3],["cr0flags",3]]],[[["cr3flags",3],["cr3flags",3]]],[[["cr4flags",3],["cr4flags",3]]],[[["cr0flags",3],["cr0flags",3],["bool",0]]],[[["cr3flags",3],["cr3flags",3],["bool",0]]],[[["cr4flags",3],["cr4flags",3],["bool",0]]],[[["cr0flags",3],["cr0flags",3]],["cr0flags",3]],[[["cr3flags",3],["cr3flags",3]],["cr3flags",3]],[[["cr4flags",3],["cr4flags",3]],["cr4flags",3]],[[["cr0flags",3],["cr0flags",3]]],[[["cr3flags",3],["cr3flags",3]]],[[["cr4flags",3],["cr4flags",3]]],[[["cr0flags",3],["cr0flags",3]],["cr0flags",3]],[[["cr3flags",3],["cr3flags",3]],["cr3flags",3]],[[["cr4flags",3],["cr4flags",3]],["cr4flags",3]],[[["cr0flags",3],["cr0flags",3]]],[[["cr3flags",3],["cr3flags",3]]],[[["cr4flags",3],["cr4flags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["cr0flags",3],["cr0flags",3]],["cr0flags",3]],[[["cr3flags",3],["cr3flags",3]],["cr3flags",3]],[[["cr4flags",3],["cr4flags",3]],["cr4flags",3]],[[]],[[]],[[["cr0flags",3]]],[[["physframe",3],["cr3flags",3]]],[[["cr4flags",3]]],[[["physframe",3],["pcid",3]]],[[["u64",0]]],[[["u64",0]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["dr6flags",3]],[[],["dr7flags",3]],[[["dr6flags",3],["dr6flags",3]],["dr6flags",3]],[[["dr7flags",3],["dr7flags",3]],["dr7flags",3]],[[["dr6flags",3],["dr6flags",3]]],[[["dr7flags",3],["dr7flags",3]]],[[["dr6flags",3],["dr6flags",3]],["dr6flags",3]],[[["dr7flags",3],["dr7flags",3]],["dr7flags",3]],[[["dr6flags",3],["dr6flags",3]]],[[["dr7flags",3],["dr7flags",3]]],[[["dr6flags",3]],["u64",0]],[[["dr7flags",3]],["u64",0]],[[["dr7value",3]],["u64",0]],[[["dr6flags",3],["dr6flags",3]],["dr6flags",3]],[[["dr7flags",3],["dr7flags",3]],["dr7flags",3]],[[["dr6flags",3],["dr6flags",3]]],[[["dr7flags",3],["dr7flags",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["debugaddressregisternumber",4]],["debugaddressregisternumber",4]],[[["dr6flags",3]],["dr6flags",3]],[[["dr7flags",3]],["dr7flags",3]],[[["breakpointcondition",4]],["breakpointcondition",4]],[[["breakpointsize",4]],["breakpointsize",4]],[[["dr7value",3]],["dr7value",3]],[[["dr6flags",3],["dr6flags",3]],["ordering",4]],[[["dr7flags",3],["dr7flags",3]],["ordering",4]],[[["dr6flags",3]],["dr6flags",3]],[[["dr7flags",3]],["dr7flags",3]],[[["dr7value",3],["debugaddressregisternumber",4]],["breakpointcondition",4]],[[["dr6flags",3],["dr6flags",3]],["bool",0]],[[["dr7flags",3],["dr7flags",3]],["bool",0]],[[["dr6flags",3],["dr6flags",3]],["dr6flags",3]],[[["dr7flags",3],["dr7flags",3]],["dr7flags",3]],[[],["dr6flags",3]],[[],["dr7flags",3]],[[["debugaddressregisternumber",4],["debugaddressregisternumber",4]],["bool",0]],[[["dr6flags",3],["dr6flags",3]],["bool",0]],[[["dr7flags",3],["dr7flags",3]],["bool",0]],[[["breakpointcondition",4],["breakpointcondition",4]],["bool",0]],[[["breakpointsize",4],["breakpointsize",4]],["bool",0]],[[["dr7value",3],["dr7value",3]],["bool",0]],[[["dr6flags",3],["intoiterator",8]]],[[["dr7flags",3],["intoiterator",8]]],[[["dr7value",3]],["dr7flags",3]],[[["dr0",3],["formatter",3]],["result",6]],[[["dr1",3],["formatter",3]],["result",6]],[[["dr2",3],["formatter",3]],["result",6]],[[["dr3",3],["formatter",3]],["result",6]],[[["debugaddressregisternumber",4],["formatter",3]],["result",6]],[[["dr6",3],["formatter",3]],["result",6]],[[["dr6flags",3],["formatter",3]],["result",6]],[[["dr6flags",3],["formatter",3]],["result",6]],[[["dr6flags",3],["formatter",3]],["result",6]],[[["dr6flags",3],["formatter",3]],["result",6]],[[["dr6flags",3],["formatter",3]],["result",6]],[[["dr7flags",3],["formatter",3]],["result",6]],[[["dr7flags",3],["formatter",3]],["result",6]],[[["dr7flags",3],["formatter",3]],["result",6]],[[["dr7flags",3],["formatter",3]],["result",6]],[[["dr7flags",3],["formatter",3]],["result",6]],[[["breakpointcondition",4],["formatter",3]],["result",6]],[[["breakpointsize",4],["formatter",3]],["result",6]],[[["dr7value",3],["formatter",3]],["result",6]],[[["dr7",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["dr7flags",3]],["dr7value",3]],[[]],[[["u64",0]],["option",4,[["dr6flags",3]]]],[[["u64",0]],["option",4,[["dr7flags",3]]]],[[["u64",0]],["option",4,[["breakpointcondition",4]]]],[[["u64",0]],["option",4,[["breakpointsize",4]]]],[[["u64",0]],["option",4,[["dr7value",3]]]],[[["u64",0]],["dr6flags",3]],[[["u64",0]],["dr7flags",3]],[[["u64",0]],["dr7value",3]],[[["u64",0]],["dr6flags",3]],[[["u64",0]],["dr7flags",3]],[[["u64",0]],["dr7value",3]],[[["intoiterator",8]],["dr6flags",3]],[[["intoiterator",8]],["dr7flags",3]],[[["debugaddressregisternumber",4]],["u8",0]],[[["debugaddressregisternumber",4]],["dr7flags",3]],[[["dr6flags",3],["",0]]],[[["dr7flags",3],["",0]]],[[["dr6flags",3],["dr6flags",3]]],[[["dr7flags",3],["dr7flags",3]]],[[["dr7value",3],["dr7flags",3]]],[[["dr6flags",3],["dr6flags",3]],["dr6flags",3]],[[["dr7flags",3],["dr7flags",3]],["dr7flags",3]],[[["dr6flags",3],["dr6flags",3]],["bool",0]],[[["dr7flags",3],["dr7flags",3]],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["dr6flags",3]],["bool",0]],[[["dr7flags",3]],["bool",0]],[[["dr6flags",3]],["bool",0]],[[["dr7flags",3]],["bool",0]],[[["debugaddressregisternumber",4]],["dr7flags",3]],[[["dr6flags",3],["dr6flags",3]],["bool",0]],[[["dr7flags",3],["dr7flags",3]],["bool",0]],[[["dr7value",3],["dr7value",3]],["bool",0]],[[["u8",0]],["option",4,[["debugaddressregisternumber",4]]]],[[["usize",0]],["option",4,[["breakpointsize",4]]]],[[["dr6flags",3]],["dr6flags",3]],[[["dr7flags",3]],["dr7flags",3]],[[["dr6flags",3],["dr6flags",3]],["option",4,[["ordering",4]]]],[[["dr7flags",3],["dr7flags",3]],["option",4,[["ordering",4]]]],[[],["u64",0]],[[],["u64",0]],[[],["u64",0]],[[],["u64",0]],[[],["u64",0]],[[],["dr6flags",3]],[[],["dr7value",3]],[[],["u64",0]],[[],["u64",0]],[[["dr6flags",3],["dr6flags",3]]],[[["dr7flags",3],["dr7flags",3]]],[[["dr7value",3],["dr7flags",3]]],[[["dr6flags",3],["dr6flags",3],["bool",0]]],[[["dr7flags",3],["dr7flags",3],["bool",0]]],[[["dr7value",3],["debugaddressregisternumber",4],["breakpointcondition",4]]],[[["dr7value",3],["dr7flags",3],["bool",0]]],[[["dr7value",3],["debugaddressregisternumber",4],["breakpointsize",4]]],[[["dr7value",3],["debugaddressregisternumber",4]],["breakpointsize",4]],[[["dr6flags",3],["dr6flags",3]],["dr6flags",3]],[[["dr7flags",3],["dr7flags",3]],["dr7flags",3]],[[["dr6flags",3],["dr6flags",3]]],[[["dr7flags",3],["dr7flags",3]]],[[["dr6flags",3],["dr6flags",3]],["dr6flags",3]],[[["dr7flags",3],["dr7flags",3]],["dr7flags",3]],[[["dr6flags",3],["dr6flags",3]]],[[["dr7flags",3],["dr7flags",3]]],[[["dr7value",3],["dr7flags",3]]],[[["debugaddressregisternumber",4]],["dr6flags",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["dr6flags",3],["dr6flags",3]],["dr6flags",3]],[[["dr7flags",3],["dr7flags",3]],["dr7flags",3]],[[["u64",0]]],[[["u64",0]]],[[["u64",0]]],[[["u64",0]]],[[["u64",0]]],[[["dr7value",3]]],[[["u64",0]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["eferflags",3]],[[],["cetflags",3]],[[["eferflags",3],["eferflags",3]],["eferflags",3]],[[["cetflags",3],["cetflags",3]],["cetflags",3]],[[["eferflags",3],["eferflags",3]]],[[["cetflags",3],["cetflags",3]]],[[["eferflags",3],["eferflags",3]],["eferflags",3]],[[["cetflags",3],["cetflags",3]],["cetflags",3]],[[["eferflags",3],["eferflags",3]]],[[["cetflags",3],["cetflags",3]]],[[["eferflags",3]],["u64",0]],[[["cetflags",3]],["u64",0]],[[["eferflags",3],["eferflags",3]],["eferflags",3]],[[["cetflags",3],["cetflags",3]],["cetflags",3]],[[["eferflags",3],["eferflags",3]]],[[["cetflags",3],["cetflags",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["eferflags",3]],["eferflags",3]],[[["cetflags",3]],["cetflags",3]],[[["eferflags",3],["eferflags",3]],["ordering",4]],[[["cetflags",3],["cetflags",3]],["ordering",4]],[[["eferflags",3]],["eferflags",3]],[[["cetflags",3]],["cetflags",3]],[[["eferflags",3],["eferflags",3]],["bool",0]],[[["cetflags",3],["cetflags",3]],["bool",0]],[[["eferflags",3],["eferflags",3]],["eferflags",3]],[[["cetflags",3],["cetflags",3]],["cetflags",3]],[[],["eferflags",3]],[[],["cetflags",3]],[[["eferflags",3],["eferflags",3]],["bool",0]],[[["cetflags",3],["cetflags",3]],["bool",0]],[[["eferflags",3],["intoiterator",8]]],[[["cetflags",3],["intoiterator",8]]],[[["msr",3],["formatter",3]],["result",6]],[[["efer",3],["formatter",3]],["result",6]],[[["fsbase",3],["formatter",3]],["result",6]],[[["gsbase",3],["formatter",3]],["result",6]],[[["kernelgsbase",3],["formatter",3]],["result",6]],[[["star",3],["formatter",3]],["result",6]],[[["lstar",3],["formatter",3]],["result",6]],[[["sfmask",3],["formatter",3]],["result",6]],[[["ucet",3],["formatter",3]],["result",6]],[[["scet",3],["formatter",3]],["result",6]],[[["eferflags",3],["formatter",3]],["result",6]],[[["eferflags",3],["formatter",3]],["result",6]],[[["eferflags",3],["formatter",3]],["result",6]],[[["eferflags",3],["formatter",3]],["result",6]],[[["eferflags",3],["formatter",3]],["result",6]],[[["cetflags",3],["formatter",3]],["result",6]],[[["cetflags",3],["formatter",3]],["result",6]],[[["cetflags",3],["formatter",3]],["result",6]],[[["cetflags",3],["formatter",3]],["result",6]],[[["cetflags",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",0]],["option",4,[["eferflags",3]]]],[[["u64",0]],["option",4,[["cetflags",3]]]],[[["u64",0]],["eferflags",3]],[[["u64",0]],["cetflags",3]],[[["u64",0]],["eferflags",3]],[[["u64",0]],["cetflags",3]],[[["intoiterator",8]],["eferflags",3]],[[["intoiterator",8]],["cetflags",3]],[[["eferflags",3],["",0]]],[[["cetflags",3],["",0]]],[[["eferflags",3],["eferflags",3]]],[[["cetflags",3],["cetflags",3]]],[[["eferflags",3],["eferflags",3]],["eferflags",3]],[[["cetflags",3],["cetflags",3]],["cetflags",3]],[[["eferflags",3],["eferflags",3]],["bool",0]],[[["cetflags",3],["cetflags",3]],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["eferflags",3]],["bool",0]],[[["cetflags",3]],["bool",0]],[[["eferflags",3]],["bool",0]],[[["cetflags",3]],["bool",0]],[[["eferflags",3],["eferflags",3]],["bool",0]],[[["cetflags",3],["cetflags",3]],["bool",0]],[[["u32",0]],["msr",3]],[[["eferflags",3]],["eferflags",3]],[[["cetflags",3]],["cetflags",3]],[[["eferflags",3],["eferflags",3]],["option",4,[["ordering",4]]]],[[["cetflags",3],["cetflags",3]],["option",4,[["ordering",4]]]],[[["msr",3]],["u64",0]],[[],["eferflags",3]],[[],["virtaddr",3]],[[],["virtaddr",3]],[[],["virtaddr",3]],[[]],[[],["virtaddr",3]],[[],["rflags",3]],[[]],[[]],[[],["u64",0]],[[]],[[["eferflags",3],["eferflags",3]]],[[["cetflags",3],["cetflags",3]]],[[["eferflags",3],["eferflags",3],["bool",0]]],[[["cetflags",3],["cetflags",3],["bool",0]]],[[["eferflags",3],["eferflags",3]],["eferflags",3]],[[["cetflags",3],["cetflags",3]],["cetflags",3]],[[["eferflags",3],["eferflags",3]]],[[["cetflags",3],["cetflags",3]]],[[["eferflags",3],["eferflags",3]],["eferflags",3]],[[["cetflags",3],["cetflags",3]],["cetflags",3]],[[["eferflags",3],["eferflags",3]]],[[["cetflags",3],["cetflags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["eferflags",3],["eferflags",3]],["eferflags",3]],[[["cetflags",3],["cetflags",3]],["cetflags",3]],[[]],[[["msr",3],["u64",0]]],[[["eferflags",3]]],[[["virtaddr",3]]],[[["virtaddr",3]]],[[["virtaddr",3]]],[[["segmentselector",3],["segmentselector",3],["segmentselector",3],["segmentselector",3]],["result",4,[["str",0]]]],[[["virtaddr",3]]],[[["rflags",3]]],[[["cetflags",3],["page",3]]],[[["cetflags",3],["page",3]]],[[["u64",0]]],[[["u16",0],["u16",0]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["mxcsr",3]],[[["mxcsr",3],["mxcsr",3]],["mxcsr",3]],[[["mxcsr",3],["mxcsr",3]]],[[["mxcsr",3],["mxcsr",3]],["mxcsr",3]],[[["mxcsr",3],["mxcsr",3]]],[[["mxcsr",3]],["u32",0]],[[["mxcsr",3],["mxcsr",3]],["mxcsr",3]],[[["mxcsr",3],["mxcsr",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["mxcsr",3]],["mxcsr",3]],[[["mxcsr",3],["mxcsr",3]],["ordering",4]],[[["mxcsr",3]],["mxcsr",3]],[[["mxcsr",3],["mxcsr",3]],["bool",0]],[[],["mxcsr",3]],[[["mxcsr",3],["mxcsr",3]],["mxcsr",3]],[[],["mxcsr",3]],[[["mxcsr",3],["mxcsr",3]],["bool",0]],[[["mxcsr",3],["intoiterator",8]]],[[["mxcsr",3],["formatter",3]],["result",6]],[[["mxcsr",3],["formatter",3]],["result",6]],[[["mxcsr",3],["formatter",3]],["result",6]],[[["mxcsr",3],["formatter",3]],["result",6]],[[["mxcsr",3],["formatter",3]],["result",6]],[[]],[[["u32",0]],["option",4,[["mxcsr",3]]]],[[["u32",0]],["mxcsr",3]],[[["u32",0]],["mxcsr",3]],[[["intoiterator",8]],["mxcsr",3]],[[["mxcsr",3],["",0]]],[[["mxcsr",3],["mxcsr",3]]],[[["mxcsr",3],["mxcsr",3]],["mxcsr",3]],[[["mxcsr",3],["mxcsr",3]],["bool",0]],[[]],[[["mxcsr",3]],["bool",0]],[[["mxcsr",3]],["bool",0]],[[["mxcsr",3],["mxcsr",3]],["bool",0]],[[["mxcsr",3]],["mxcsr",3]],[[["mxcsr",3],["mxcsr",3]],["option",4,[["ordering",4]]]],[[],["mxcsr",3]],[[["mxcsr",3],["mxcsr",3]]],[[["mxcsr",3],["mxcsr",3],["bool",0]]],[[["mxcsr",3],["mxcsr",3]],["mxcsr",3]],[[["mxcsr",3],["mxcsr",3]]],[[["mxcsr",3],["mxcsr",3]],["mxcsr",3]],[[["mxcsr",3],["mxcsr",3]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["mxcsr",3],["mxcsr",3]],["mxcsr",3]],[[["mxcsr",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["rflags",3]],[[["rflags",3],["rflags",3]],["rflags",3]],[[["rflags",3],["rflags",3]]],[[["rflags",3],["rflags",3]],["rflags",3]],[[["rflags",3],["rflags",3]]],[[["rflags",3]],["u64",0]],[[["rflags",3],["rflags",3]],["rflags",3]],[[["rflags",3],["rflags",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["rflags",3]],["rflags",3]],[[["rflags",3],["rflags",3]],["ordering",4]],[[["rflags",3]],["rflags",3]],[[["rflags",3],["rflags",3]],["bool",0]],[[["rflags",3],["rflags",3]],["rflags",3]],[[],["rflags",3]],[[["rflags",3],["rflags",3]],["bool",0]],[[["rflags",3],["intoiterator",8]]],[[["rflags",3],["formatter",3]],["result",6]],[[["rflags",3],["formatter",3]],["result",6]],[[["rflags",3],["formatter",3]],["result",6]],[[["rflags",3],["formatter",3]],["result",6]],[[["rflags",3],["formatter",3]],["result",6]],[[]],[[["u64",0]],["option",4,[["rflags",3]]]],[[["u64",0]],["rflags",3]],[[["u64",0]],["rflags",3]],[[["intoiterator",8]],["rflags",3]],[[["rflags",3],["",0]]],[[["rflags",3],["rflags",3]]],[[["rflags",3],["rflags",3]],["rflags",3]],[[["rflags",3],["rflags",3]],["bool",0]],[[]],[[["rflags",3]],["bool",0]],[[["rflags",3]],["bool",0]],[[["rflags",3],["rflags",3]],["bool",0]],[[["rflags",3]],["rflags",3]],[[["rflags",3],["rflags",3]],["option",4,[["ordering",4]]]],[[],["rflags",3]],[[],["u64",0]],[[["rflags",3],["rflags",3]]],[[["rflags",3],["rflags",3],["bool",0]]],[[["rflags",3],["rflags",3]],["rflags",3]],[[["rflags",3],["rflags",3]]],[[["rflags",3],["rflags",3]],["rflags",3]],[[["rflags",3],["rflags",3]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["rflags",3],["rflags",3]],["rflags",3]],[[["rflags",3]]],[[["u64",0]]],null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["segmentselector",3]],["segmentselector",3]],[[["segmentselector",3],["segmentselector",3]],["ordering",4]],[[["segmentselector",3],["segmentselector",3]],["bool",0]],[[["segmentselector",3],["formatter",3]],["result",6]],[[["cs",3],["formatter",3]],["result",6]],[[["ss",3],["formatter",3]],["result",6]],[[["ds",3],["formatter",3]],["result",6]],[[["es",3],["formatter",3]],["result",6]],[[["fs",3],["formatter",3]],["result",6]],[[["gs",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["segmentselector",3]],[[],["segmentselector",3]],[[],["segmentselector",3]],[[],["segmentselector",3]],[[],["segmentselector",3]],[[],["segmentselector",3]],[[],["segmentselector",3]],[[["segmentselector",3],["",0]]],[[["segmentselector",3]],["u16",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["segmentselector",3],["segmentselector",3]],["bool",0]],[[["u16",0],["privilegelevel",4]],["segmentselector",3]],[[["segmentselector",3],["segmentselector",3]],["option",4,[["ordering",4]]]],[[],["virtaddr",3]],[[],["virtaddr",3]],[[],["virtaddr",3]],[[["segmentselector",3]],["privilegelevel",4]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3]]],[[["segmentselector",3],["privilegelevel",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["virtaddr",3]]],[[["virtaddr",3]]],[[["virtaddr",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["xcr0flags",3]],[[["xcr0flags",3],["xcr0flags",3]],["xcr0flags",3]],[[["xcr0flags",3],["xcr0flags",3]]],[[["xcr0flags",3],["xcr0flags",3]],["xcr0flags",3]],[[["xcr0flags",3],["xcr0flags",3]]],[[["xcr0flags",3]],["u64",0]],[[["xcr0flags",3],["xcr0flags",3]],["xcr0flags",3]],[[["xcr0flags",3],["xcr0flags",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["xcr0flags",3]],["xcr0flags",3]],[[["xcr0flags",3],["xcr0flags",3]],["ordering",4]],[[["xcr0flags",3]],["xcr0flags",3]],[[["xcr0flags",3],["xcr0flags",3]],["bool",0]],[[["xcr0flags",3],["xcr0flags",3]],["xcr0flags",3]],[[],["xcr0flags",3]],[[["xcr0flags",3],["xcr0flags",3]],["bool",0]],[[["xcr0flags",3],["intoiterator",8]]],[[["xcr0",3],["formatter",3]],["result",6]],[[["xcr0flags",3],["formatter",3]],["result",6]],[[["xcr0flags",3],["formatter",3]],["result",6]],[[["xcr0flags",3],["formatter",3]],["result",6]],[[["xcr0flags",3],["formatter",3]],["result",6]],[[["xcr0flags",3],["formatter",3]],["result",6]],[[]],[[]],[[["u64",0]],["option",4,[["xcr0flags",3]]]],[[["u64",0]],["xcr0flags",3]],[[["u64",0]],["xcr0flags",3]],[[["intoiterator",8]],["xcr0flags",3]],[[["xcr0flags",3],["",0]]],[[["xcr0flags",3],["xcr0flags",3]]],[[["xcr0flags",3],["xcr0flags",3]],["xcr0flags",3]],[[["xcr0flags",3],["xcr0flags",3]],["bool",0]],[[]],[[]],[[["xcr0flags",3]],["bool",0]],[[["xcr0flags",3]],["bool",0]],[[["xcr0flags",3],["xcr0flags",3]],["bool",0]],[[["xcr0flags",3]],["xcr0flags",3]],[[["xcr0flags",3],["xcr0flags",3]],["option",4,[["ordering",4]]]],[[],["xcr0flags",3]],[[],["u64",0]],[[["xcr0flags",3],["xcr0flags",3]]],[[["xcr0flags",3],["xcr0flags",3],["bool",0]]],[[["xcr0flags",3],["xcr0flags",3]],["xcr0flags",3]],[[["xcr0flags",3],["xcr0flags",3]]],[[["xcr0flags",3],["xcr0flags",3]],["xcr0flags",3]],[[["xcr0flags",3],["xcr0flags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["xcr0flags",3],["xcr0flags",3]],["xcr0flags",3]],[[["xcr0flags",3]]],[[["u64",0]]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["descriptortablepointer",3]],["descriptortablepointer",3]],[[["descriptortablepointer",3],["formatter",3]],["result",6]],[[]],null,null,[[]],null,null,null,[[],["result",4]],[[],["result",4]],null,[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["globaldescriptortable",3],["descriptor",4]],["segmentselector",3]],[[],["descriptorflags",3]],[[["globaldescriptortable",3]]],[[["descriptorflags",3],["descriptorflags",3]],["descriptorflags",3]],[[["descriptorflags",3],["descriptorflags",3]]],[[["descriptorflags",3],["descriptorflags",3]],["descriptorflags",3]],[[["descriptorflags",3],["descriptorflags",3]]],[[["descriptorflags",3]],["u64",0]],[[["descriptorflags",3],["descriptorflags",3]],["descriptorflags",3]],[[["descriptorflags",3],["descriptorflags",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["globaldescriptortable",3]],["globaldescriptortable",3]],[[["descriptor",4]],["descriptor",4]],[[["descriptorflags",3]],["descriptorflags",3]],[[["descriptorflags",3],["descriptorflags",3]],["ordering",4]],[[["descriptorflags",3]],["descriptorflags",3]],[[["descriptorflags",3],["descriptorflags",3]],["bool",0]],[[["descriptorflags",3],["descriptorflags",3]],["descriptorflags",3]],[[],["descriptorflags",3]],[[["descriptorflags",3],["descriptorflags",3]],["bool",0]],[[["descriptorflags",3],["intoiterator",8]]],[[["globaldescriptortable",3],["formatter",3]],["result",6]],[[["descriptor",4],["formatter",3]],["result",6]],[[["descriptorflags",3],["formatter",3]],["result",6]],[[["descriptorflags",3],["formatter",3]],["result",6]],[[["descriptorflags",3],["formatter",3]],["result",6]],[[["descriptorflags",3],["formatter",3]],["result",6]],[[["descriptorflags",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["u64",0]],["option",4,[["descriptorflags",3]]]],[[["u64",0]],["descriptorflags",3]],[[["u64",0]],["descriptorflags",3]],[[["intoiterator",8]],["descriptorflags",3]],[[],["globaldescriptortable",3]],[[["descriptorflags",3],["",0]]],[[["descriptorflags",3],["descriptorflags",3]]],[[["descriptorflags",3],["descriptorflags",3]],["descriptorflags",3]],[[["descriptorflags",3],["descriptorflags",3]],["bool",0]],[[]],[[]],[[]],[[["descriptorflags",3]],["bool",0]],[[["descriptorflags",3]],["bool",0]],[[],["descriptor",4]],[[],["descriptor",4]],[[["globaldescriptortable",3]]],[[["globaldescriptortable",3]]],[[["descriptorflags",3],["descriptorflags",3]],["bool",0]],[[],["globaldescriptortable",3]],[[["descriptorflags",3]],["descriptorflags",3]],[[["descriptorflags",3],["descriptorflags",3]],["option",4,[["ordering",4]]]],[[["descriptorflags",3],["descriptorflags",3]]],[[["descriptorflags",3],["descriptorflags",3],["bool",0]]],[[["descriptorflags",3],["descriptorflags",3]],["descriptorflags",3]],[[["descriptorflags",3],["descriptorflags",3]]],[[["descriptorflags",3],["descriptorflags",3]],["descriptorflags",3]],[[["descriptorflags",3],["descriptorflags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["taskstatesegment",3]],["descriptor",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["descriptorflags",3],["descriptorflags",3]],["descriptorflags",3]],[[],["descriptor",4]],[[],["descriptor",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["pagefaulterrorcode",3]],[[["interruptstackframe",3]],["volatile",3,[["interruptstackframevalue",3]]]],[[["pagefaulterrorcode",3],["pagefaulterrorcode",3]],["pagefaulterrorcode",3]],[[["pagefaulterrorcode",3],["pagefaulterrorcode",3]]],[[["pagefaulterrorcode",3],["pagefaulterrorcode",3]],["pagefaulterrorcode",3]],[[["pagefaulterrorcode",3],["pagefaulterrorcode",3]]],[[["pagefaulterrorcode",3]],["u64",0]],[[["pagefaulterrorcode",3],["pagefaulterrorcode",3]],["pagefaulterrorcode",3]],[[["pagefaulterrorcode",3],["pagefaulterrorcode",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[["interruptdescriptortable",3]],["interruptdescriptortable",3]],[[["entry",3,[["clone",8]]]],["entry",3,[["clone",8]]]],[[["entryoptions",3]],["entryoptions",3]],[[["interruptstackframevalue",3]],["interruptstackframevalue",3]],[[["pagefaulterrorcode",3]],["pagefaulterrorcode",3]],[[["selectorerrorcode",3]],["selectorerrorcode",3]],[[["descriptortable",4]],["descriptortable",4]],[[["exceptionvector",4]],["exceptionvector",4]],[[["pagefaulterrorcode",3],["pagefaulterrorcode",3]],["ordering",4]],null,[[["pagefaulterrorcode",3]],["pagefaulterrorcode",3]],[[["pagefaulterrorcode",3],["pagefaulterrorcode",3]],["bool",0]],null,null,null,[[["interruptstackframe",3]]],[[["selectorerrorcode",3]],["descriptortable",4]],null,[[["pagefaulterrorcode",3],["pagefaulterrorcode",3]],["pagefaulterrorcode",3]],[[["entryoptions",3],["bool",0]],["entryoptions",3]],null,null,[[],["pagefaulterrorcode",3]],[[["entry",3],["entry",3]],["bool",0]],[[["entryoptions",3],["entryoptions",3]],["bool",0]],[[["pagefaulterrorcode",3],["pagefaulterrorcode",3]],["bool",0]],[[["selectorerrorcode",3],["selectorerrorcode",3]],["bool",0]],[[["descriptortable",4],["descriptortable",4]],["bool",0]],[[["exceptionvector",4],["exceptionvector",4]],["bool",0]],[[["pagefaulterrorcode",3],["intoiterator",8]]],[[["selectorerrorcode",3]],["bool",0]],[[["interruptstackframe",3],["formatter",3]],["result",6]],[[["interruptdescriptortable",3],["formatter",3]],["result",6]],[[["entry",3],["formatter",3]],["result",6]],[[["entryoptions",3],["formatter",3]],["result",6]],[[["interruptstackframevalue",3],["formatter",3]],["result",6]],[[["pagefaulterrorcode",3],["formatter",3]],["result",6]],[[["pagefaulterrorcode",3],["formatter",3]],["result",6]],[[["pagefaulterrorcode",3],["formatter",3]],["result",6]],[[["pagefaulterrorcode",3],["formatter",3]],["result",6]],[[["pagefaulterrorcode",3],["formatter",3]],["result",6]],[[["selectorerrorcode",3],["formatter",3]],["result",6]],[[["descriptortable",4],["formatter",3]],["result",6]],[[["exceptionvector",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",0]],["option",4,[["pagefaulterrorcode",3]]]],[[["u64",0]],["pagefaulterrorcode",3]],[[["u64",0]],["pagefaulterrorcode",3]],[[["intoiterator",8]],["pagefaulterrorcode",3]],null,[[["entry",3]],["virtaddr",3]],[[["pagefaulterrorcode",3],["",0]]],[[["selectorerrorcode",3],["",0]]],[[["descriptortable",4],["",0]]],null,[[["interruptdescriptortable",3],["usize",0]]],[[["selectorerrorcode",3]],["u64",0]],[[["interruptdescriptortable",3],["usize",0]]],[[["pagefaulterrorcode",3],["pagefaulterrorcode",3]]],null,[[["pagefaulterrorcode",3],["pagefaulterrorcode",3]],["pagefaulterrorcode",3]],[[["pagefaulterrorcode",3],["pagefaulterrorcode",3]],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["pagefaulterrorcode",3]],["bool",0]],[[["pagefaulterrorcode",3]],["bool",0]],[[["selectorerrorcode",3]],["bool",0]],[[["interruptdescriptortable",3]]],[[["interruptdescriptortable",3]]],null,[[],["entry",3]],[[["entryoptions",3],["entryoptions",3]],["bool",0]],[[["pagefaulterrorcode",3],["pagefaulterrorcode",3]],["bool",0]],[[["selectorerrorcode",3],["selectorerrorcode",3]],["bool",0]],[[],["interruptdescriptortable",3]],[[["u64",0]],["option",4,[["selectorerrorcode",3]]]],[[["u64",0]],["selectorerrorcode",3]],null,[[["pagefaulterrorcode",3]],["pagefaulterrorcode",3]],null,null,[[["pagefaulterrorcode",3],["pagefaulterrorcode",3]],["option",4,[["ordering",4]]]],[[["pagefaulterrorcode",3],["pagefaulterrorcode",3]]],[[["interruptdescriptortable",3]]],null,null,[[["pagefaulterrorcode",3],["pagefaulterrorcode",3],["bool",0]]],[[["entry",3],["virtaddr",3]],["entryoptions",3]],[[["entry",3,[["diverginghandlerfuncwitherrcode",6]]],["diverginghandlerfuncwitherrcode",6]],["entryoptions",3]],[[["entry",3,[["diverginghandlerfunc",6]]],["diverginghandlerfunc",6]],["entryoptions",3]],[[["entry",3,[["pagefaulthandlerfunc",6]]],["pagefaulthandlerfunc",6]],["entryoptions",3]],[[["entry",3,[["handlerfuncwitherrcode",6]]],["handlerfuncwitherrcode",6]],["entryoptions",3]],[[["entry",3,[["handlerfunc",6]]],["handlerfunc",6]],["entryoptions",3]],[[["entryoptions",3],["bool",0]],["entryoptions",3]],[[["entryoptions",3],["privilegelevel",4]],["entryoptions",3]],[[["entryoptions",3],["u16",0]],["entryoptions",3]],null,[[["interruptdescriptortable",3],["rangebounds",8,[["usize",0]]]]],[[["interruptdescriptortable",3],["rangebounds",8,[["usize",0]]]]],null,null,null,[[["pagefaulterrorcode",3],["pagefaulterrorcode",3]],["pagefaulterrorcode",3]],[[["pagefaulterrorcode",3],["pagefaulterrorcode",3]]],[[["pagefaulterrorcode",3],["pagefaulterrorcode",3]],["pagefaulterrorcode",3]],[[["pagefaulterrorcode",3],["pagefaulterrorcode",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["pagefaulterrorcode",3],["pagefaulterrorcode",3]],["pagefaulterrorcode",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["option",4,[["physframe",3]]]],[[["",0],["physframe",3]]],null,null,null,null,null,null,null,[[["physframe",3,[["pagesize",8]]],["u64",0]]],[[["physframe",3,[["pagesize",8]]],["u64",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["physframe",3,[["",26,[["clone",8],["pagesize",8]]]]]],["physframe",3,[["",26,[["clone",8],["pagesize",8]]]]]],[[["physframerange",3,[["",26,[["clone",8],["pagesize",8]]]]]],["physframerange",3,[["",26,[["clone",8],["pagesize",8]]]]]],[[["physframerangeinclusive",3,[["",26,[["clone",8],["pagesize",8]]]]]],["physframerangeinclusive",3,[["",26,[["clone",8],["pagesize",8]]]]]],[[["physframe",3,[["",26,[["ord",8],["pagesize",8]]]]],["physframe",3]],["ordering",4]],[[["physaddr",3]],["physframe",3,[["pagesize",8]]]],null,null,[[["physframe",3,[["",26,[["partialeq",8],["pagesize",8]]]]],["physframe",3]],["bool",0]],[[["physframerange",3,[["",26,[["partialeq",8],["pagesize",8]]]]],["physframerange",3]],["bool",0]],[[["physframerangeinclusive",3,[["",26,[["partialeq",8],["pagesize",8]]]]],["physframerangeinclusive",3]],["bool",0]],[[["physframe",3,[["pagesize",8]]],["formatter",3]],["result",6]],[[["physframerange",3,[["pagesize",8]]],["formatter",3]],["result",6]],[[["physframerangeinclusive",3,[["pagesize",8]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["physaddr",3]],["result",4,[["physframe",3,[["pagesize",8]]],["addressnotaligned",3]]]],[[["physaddr",3]],["physframe",3,[["pagesize",8]]]],[[["physframe",3,[["",26,[["hash",8],["pagesize",8]]]]],["",0]]],[[["physframerange",3,[["",26,[["hash",8],["pagesize",8]]]]],["",0]]],[[["physframerangeinclusive",3,[["",26,[["hash",8],["pagesize",8]]]]],["",0]]],[[]],[[]],[[]],[[]],[[]],[[["physframerange",3,[["pagesize",8]]]],["bool",0]],[[["physframerangeinclusive",3,[["pagesize",8]]]],["bool",0]],[[["physframe",3,[["",26,[["partialeq",8],["pagesize",8]]]]],["physframe",3]],["bool",0]],[[["physframerange",3,[["",26,[["partialeq",8],["pagesize",8]]]]],["physframerange",3]],["bool",0]],[[["physframerangeinclusive",3,[["",26,[["partialeq",8],["pagesize",8]]]]],["physframerangeinclusive",3]],["bool",0]],[[["physframerange",3,[["pagesize",8]]]],["option",4]],[[["physframerangeinclusive",3,[["pagesize",8]]]],["option",4]],[[["physframe",3,[["",26,[["partialord",8],["pagesize",8]]]]],["physframe",3]],["option",4,[["ordering",4]]]],[[["physframe",3,[["pagesize",8]]],["physframe",3,[["pagesize",8]]]],["physframerange",3,[["pagesize",8]]]],[[["physframe",3,[["pagesize",8]]],["physframe",3,[["pagesize",8]]]],["physframerangeinclusive",3,[["pagesize",8]]]],[[["physframe",3,[["pagesize",8]]]],["u64",0]],null,null,[[["physframe",3,[["pagesize",8]]]],["physaddr",3]],[[["physframe",3,[["pagesize",8]]],["physframe",3,[["pagesize",8]]]]],[[["physframe",3,[["pagesize",8]]],["u64",0]]],[[["physframe",3,[["pagesize",8]]],["u64",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["",0]]],[[["mappedpagetable",3,[["pagetableframemapping",8]]],["",0]]],[[["offsetpagetable",3],["",0]]],[[["recursivepagetable",3],["",0]]],[[["",0],["pagerangeinclusive",3],["",0]]],[[["mappedpagetable",3,[["pagetableframemapping",8]]],["pagerangeinclusive",3],["",0]]],[[["offsetpagetable",3],["pagerangeinclusive",3],["",0]]],[[["recursivepagetable",3],["pagerangeinclusive",3],["",0]]],[[],["mapperflushall",3]],[[["mapperflush",3,[["pagesize",8]]]]],[[["mapperflushall",3]]],[[["mappedpagetable",3,[["",26,[["debug",8],["pagetableframemapping",8]]]]],["formatter",3]],["result",6]],[[["offsetpagetable",3],["formatter",3]],["result",6]],[[["recursivepagetable",3],["formatter",3]],["result",6]],[[["invalidpagetable",4],["formatter",3]],["result",6]],[[["invalidpagetable",4],["formatter",3]],["result",6]],[[["translateresult",4],["formatter",3]],["result",6]],[[["mappedframe",4],["formatter",3]],["result",6]],[[["mapperflush",3,[["",26,[["debug",8],["pagesize",8]]]]],["formatter",3]],["result",6]],[[["mapperflushall",3],["formatter",3]],["result",6]],[[["maptoerror",4,[["",26,[["debug",8],["pagesize",8]]]]],["formatter",3]],["result",6]],[[["unmaperror",4],["formatter",3]],["result",6]],[[["flagupdateerror",4],["formatter",3]],["result",6]],[[["translateerror",4],["formatter",3]],["result",6]],[[["",0],["physframe",3]],["pagetable",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["physframe",3],["pagetableflags",3],["",0]],["result",4,[["mapperflush",3],["maptoerror",4]]]],[[["mapperflush",3,[["pagesize",8]]]]],[[["mapperflushall",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mappedpagetable",3,[["pagetableframemapping",8]]]],["pagetable",3]],[[["offsetpagetable",3]],["pagetable",3]],[[["recursivepagetable",3]],["pagetable",3]],[[["",0],["page",3],["physframe",3],["pagetableflags",3],["",0]],["result",4,[["mapperflush",3],["maptoerror",4]]]],[[["",0],["page",3],["physframe",3],["pagetableflags",3],["pagetableflags",3],["",0]],["result",4,[["mapperflush",3],["maptoerror",4]]]],[[["mappedpagetable",3,[["pagetableframemapping",8]]],["page",3,[["size2mib",4]]],["physframe",3,[["size2mib",4]]],["pagetableflags",3],["pagetableflags",3],["",0]],["result",4,[["mapperflush",3,[["size2mib",4]]],["maptoerror",4,[["size2mib",4]]]]]],[[["mappedpagetable",3,[["pagetableframemapping",8]]],["page",3,[["size4kib",4]]],["physframe",3,[["size4kib",4]]],["pagetableflags",3],["pagetableflags",3],["",0]],["result",4,[["mapperflush",3,[["size4kib",4]]],["maptoerror",4,[["size4kib",4]]]]]],[[["mappedpagetable",3,[["pagetableframemapping",8]]],["page",3,[["size1gib",4]]],["physframe",3,[["size1gib",4]]],["pagetableflags",3],["pagetableflags",3],["",0]],["result",4,[["mapperflush",3,[["size1gib",4]]],["maptoerror",4,[["size1gib",4]]]]]],[[["offsetpagetable",3],["page",3,[["size1gib",4]]],["physframe",3,[["size1gib",4]]],["pagetableflags",3],["pagetableflags",3],["",0]],["result",4,[["mapperflush",3,[["size1gib",4]]],["maptoerror",4,[["size1gib",4]]]]]],[[["offsetpagetable",3],["page",3,[["size2mib",4]]],["physframe",3,[["size2mib",4]]],["pagetableflags",3],["pagetableflags",3],["",0]],["result",4,[["mapperflush",3,[["size2mib",4]]],["maptoerror",4,[["size2mib",4]]]]]],[[["offsetpagetable",3],["page",3,[["size4kib",4]]],["physframe",3,[["size4kib",4]]],["pagetableflags",3],["pagetableflags",3],["",0]],["result",4,[["mapperflush",3,[["size4kib",4]]],["maptoerror",4,[["size4kib",4]]]]]],[[["recursivepagetable",3],["page",3,[["size1gib",4]]],["physframe",3,[["size1gib",4]]],["pagetableflags",3],["pagetableflags",3],["",0]],["result",4,[["mapperflush",3,[["size1gib",4]]],["maptoerror",4,[["size1gib",4]]]]]],[[["recursivepagetable",3],["page",3,[["size4kib",4]]],["physframe",3,[["size4kib",4]]],["pagetableflags",3],["pagetableflags",3],["",0]],["result",4,[["mapperflush",3,[["size4kib",4]]],["maptoerror",4,[["size4kib",4]]]]]],[[["recursivepagetable",3],["page",3,[["size2mib",4]]],["physframe",3,[["size2mib",4]]],["pagetableflags",3],["pagetableflags",3],["",0]],["result",4,[["mapperflush",3,[["size2mib",4]]],["maptoerror",4,[["size2mib",4]]]]]],[[["pagetable",3],["pagetableframemapping",8]],["mappedpagetable",3,[["pagetableframemapping",8]]]],[[["pagetable",3],["virtaddr",3]],["offsetpagetable",3]],[[["pagetable",3]],["result",4,[["recursivepagetable",3],["invalidpagetable",4]]]],[[["page",3,[["pagesize",8]]]],["mapperflush",3,[["pagesize",8]]]],[[],["mapperflushall",3]],[[["pagetable",3],["pagetableindex",3]],["recursivepagetable",3]],[[["mappedpagetable",3,[["pagetableframemapping",8]]]],["",0]],[[["offsetpagetable",3]],["virtaddr",3]],[[["",0],["page",3],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["mappedpagetable",3,[["pagetableframemapping",8]]],["page",3,[["size4kib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["mappedpagetable",3,[["pagetableframemapping",8]]],["page",3,[["size1gib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["mappedpagetable",3,[["pagetableframemapping",8]]],["page",3,[["size2mib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["offsetpagetable",3],["page",3,[["size4kib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["offsetpagetable",3],["page",3,[["size2mib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["offsetpagetable",3],["page",3,[["size1gib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["recursivepagetable",3],["page",3,[["size2mib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["recursivepagetable",3],["page",3,[["size4kib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["recursivepagetable",3],["page",3,[["size1gib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["",0],["page",3],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["mappedpagetable",3,[["pagetableframemapping",8]]],["page",3,[["size4kib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["mappedpagetable",3,[["pagetableframemapping",8]]],["page",3,[["size1gib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["mappedpagetable",3,[["pagetableframemapping",8]]],["page",3,[["size2mib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["offsetpagetable",3],["page",3,[["size1gib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["offsetpagetable",3],["page",3,[["size2mib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["offsetpagetable",3],["page",3,[["size4kib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["recursivepagetable",3],["page",3,[["size2mib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["recursivepagetable",3],["page",3,[["size4kib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["recursivepagetable",3],["page",3,[["size1gib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["",0],["page",3],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["mappedpagetable",3,[["pagetableframemapping",8]]],["page",3,[["size2mib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["mappedpagetable",3,[["pagetableframemapping",8]]],["page",3,[["size1gib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["mappedpagetable",3,[["pagetableframemapping",8]]],["page",3,[["size4kib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["offsetpagetable",3],["page",3,[["size1gib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["offsetpagetable",3],["page",3,[["size2mib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["offsetpagetable",3],["page",3,[["size4kib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["recursivepagetable",3],["page",3,[["size1gib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["recursivepagetable",3],["page",3,[["size4kib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["recursivepagetable",3],["page",3,[["size2mib",4]]],["pagetableflags",3]],["result",4,[["mapperflushall",3],["flagupdateerror",4]]]],[[["mappedframe",4]],["u64",0]],[[["mappedframe",4]],["physaddr",3]],[[["",0],["virtaddr",3]],["translateresult",4]],[[["mappedpagetable",3,[["pagetableframemapping",8]]],["virtaddr",3]],["translateresult",4]],[[["offsetpagetable",3],["virtaddr",3]],["translateresult",4]],[[["recursivepagetable",3],["virtaddr",3]],["translateresult",4]],[[["",0],["virtaddr",3]],["option",4,[["physaddr",3]]]],[[["",0],["page",3]],["result",4,[["physframe",3],["translateerror",4]]]],[[["mappedpagetable",3,[["pagetableframemapping",8]]],["page",3,[["size1gib",4]]]],["result",4,[["physframe",3,[["size1gib",4]]],["translateerror",4]]]],[[["mappedpagetable",3,[["pagetableframemapping",8]]],["page",3,[["size4kib",4]]]],["result",4,[["physframe",3,[["size4kib",4]]],["translateerror",4]]]],[[["mappedpagetable",3,[["pagetableframemapping",8]]],["page",3,[["size2mib",4]]]],["result",4,[["physframe",3,[["size2mib",4]]],["translateerror",4]]]],[[["offsetpagetable",3],["page",3,[["size4kib",4]]]],["result",4,[["physframe",3,[["size4kib",4]]],["translateerror",4]]]],[[["offsetpagetable",3],["page",3,[["size2mib",4]]]],["result",4,[["physframe",3,[["size2mib",4]]],["translateerror",4]]]],[[["offsetpagetable",3],["page",3,[["size1gib",4]]]],["result",4,[["physframe",3,[["size1gib",4]]],["translateerror",4]]]],[[["recursivepagetable",3],["page",3,[["size1gib",4]]]],["result",4,[["physframe",3,[["size1gib",4]]],["translateerror",4]]]],[[["recursivepagetable",3],["page",3,[["size2mib",4]]]],["result",4,[["physframe",3,[["size2mib",4]]],["translateerror",4]]]],[[["recursivepagetable",3],["page",3,[["size4kib",4]]]],["result",4,[["physframe",3,[["size4kib",4]]],["translateerror",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["page",3]],["result",4,[["unmaperror",4]]]],[[["mappedpagetable",3,[["pagetableframemapping",8]]],["page",3,[["size2mib",4]]]],["result",4,[["unmaperror",4]]]],[[["mappedpagetable",3,[["pagetableframemapping",8]]],["page",3,[["size1gib",4]]]],["result",4,[["unmaperror",4]]]],[[["mappedpagetable",3,[["pagetableframemapping",8]]],["page",3,[["size4kib",4]]]],["result",4,[["unmaperror",4]]]],[[["offsetpagetable",3],["page",3,[["size2mib",4]]]],["result",4,[["unmaperror",4]]]],[[["offsetpagetable",3],["page",3,[["size4kib",4]]]],["result",4,[["unmaperror",4]]]],[[["offsetpagetable",3],["page",3,[["size1gib",4]]]],["result",4,[["unmaperror",4]]]],[[["recursivepagetable",3],["page",3,[["size1gib",4]]]],["result",4,[["unmaperror",4]]]],[[["recursivepagetable",3],["page",3,[["size2mib",4]]]],["result",4,[["unmaperror",4]]]],[[["recursivepagetable",3],["page",3,[["size4kib",4]]]],["result",4,[["unmaperror",4]]]],[[["",0],["page",3],["pagetableflags",3]],["result",4,[["mapperflush",3],["flagupdateerror",4]]]],[[["mappedpagetable",3,[["pagetableframemapping",8]]],["page",3,[["size1gib",4]]],["pagetableflags",3]],["result",4,[["mapperflush",3,[["size1gib",4]]],["flagupdateerror",4]]]],[[["mappedpagetable",3,[["pagetableframemapping",8]]],["page",3,[["size4kib",4]]],["pagetableflags",3]],["result",4,[["mapperflush",3,[["size4kib",4]]],["flagupdateerror",4]]]],[[["mappedpagetable",3,[["pagetableframemapping",8]]],["page",3,[["size2mib",4]]],["pagetableflags",3]],["result",4,[["mapperflush",3,[["size2mib",4]]],["flagupdateerror",4]]]],[[["offsetpagetable",3],["page",3,[["size2mib",4]]],["pagetableflags",3]],["result",4,[["mapperflush",3,[["size2mib",4]]],["flagupdateerror",4]]]],[[["offsetpagetable",3],["page",3,[["size1gib",4]]],["pagetableflags",3]],["result",4,[["mapperflush",3,[["size1gib",4]]],["flagupdateerror",4]]]],[[["offsetpagetable",3],["page",3,[["size4kib",4]]],["pagetableflags",3]],["result",4,[["mapperflush",3,[["size4kib",4]]],["flagupdateerror",4]]]],[[["recursivepagetable",3],["page",3,[["size4kib",4]]],["pagetableflags",3]],["result",4,[["mapperflush",3,[["size4kib",4]]],["flagupdateerror",4]]]],[[["recursivepagetable",3],["page",3,[["size1gib",4]]],["pagetableflags",3]],["result",4,[["mapperflush",3,[["size1gib",4]]],["flagupdateerror",4]]]],[[["recursivepagetable",3],["page",3,[["size2mib",4]]],["pagetableflags",3]],["result",4,[["mapperflush",3,[["size2mib",4]]],["flagupdateerror",4]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["page",3,[["pagesize",8]]],["u64",0]]],[[["page",3,[["pagesize",8]]],["u64",0]]],[[["pagerange",3,[["size2mib",4]]]],["pagerange",3,[["size4kib",4]]]],[[["page",3,[["pagesize",8]]],["usize",0]],["option",4,[["page",3,[["pagesize",8]]]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["size4kib",4]],["size4kib",4]],[[["size2mib",4]],["size2mib",4]],[[["size1gib",4]],["size1gib",4]],[[["page",3,[["",26,[["clone",8],["pagesize",8]]]]]],["page",3,[["",26,[["clone",8],["pagesize",8]]]]]],[[["pagerange",3,[["",26,[["clone",8],["pagesize",8]]]]]],["pagerange",3,[["",26,[["clone",8],["pagesize",8]]]]]],[[["pagerangeinclusive",3,[["",26,[["clone",8],["pagesize",8]]]]]],["pagerangeinclusive",3,[["",26,[["clone",8],["pagesize",8]]]]]],[[["size4kib",4],["size4kib",4]],["ordering",4]],[[["size2mib",4],["size2mib",4]],["ordering",4]],[[["size1gib",4],["size1gib",4]],["ordering",4]],[[["page",3,[["",26,[["ord",8],["pagesize",8]]]]],["page",3]],["ordering",4]],[[["virtaddr",3]],["page",3,[["pagesize",8]]]],null,null,[[["size4kib",4],["size4kib",4]],["bool",0]],[[["size2mib",4],["size2mib",4]],["bool",0]],[[["size1gib",4],["size1gib",4]],["bool",0]],[[["page",3,[["",26,[["partialeq",8],["pagesize",8]]]]],["page",3]],["bool",0]],[[["pagerange",3,[["",26,[["partialeq",8],["pagesize",8]]]]],["pagerange",3]],["bool",0]],[[["pagerangeinclusive",3,[["",26,[["partialeq",8],["pagesize",8]]]]],["pagerangeinclusive",3]],["bool",0]],[[["size4kib",4],["formatter",3]],["result",6]],[[["size2mib",4],["formatter",3]],["result",6]],[[["size1gib",4],["formatter",3]],["result",6]],[[["page",3,[["pagesize",8]]],["formatter",3]],["result",6]],[[["pagerange",3,[["pagesize",8]]],["formatter",3]],["result",6]],[[["pagerangeinclusive",3,[["pagesize",8]]],["formatter",3]],["result",6]],[[["addressnotaligned",3],["formatter",3]],["result",6]],[[["addressnotaligned",3],["formatter",3]],["result",6]],[[["page",3,[["pagesize",8]]],["usize",0]],["option",4,[["page",3,[["pagesize",8]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pagetableindex",3],["pagetableindex",3],["pagetableindex",3],["pagetableindex",3]],["page",3,[["size4kib",4]]]],[[["pagetableindex",3],["pagetableindex",3]],["page",3,[["size1gib",4]]]],[[["pagetableindex",3],["pagetableindex",3],["pagetableindex",3]],["page",3,[["size2mib",4]]]],[[["virtaddr",3]],["result",4,[["page",3,[["pagesize",8]]],["addressnotaligned",3]]]],[[["virtaddr",3]],["page",3,[["pagesize",8]]]],[[["page",3,[["",26,[["hash",8],["pagesize",8]]]]],["",0]]],[[["pagerange",3,[["",26,[["hash",8],["pagesize",8]]]]],["",0]]],[[["pagerangeinclusive",3,[["",26,[["hash",8],["pagesize",8]]]]],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pagerange",3,[["pagesize",8]]]],["bool",0]],[[["pagerangeinclusive",3,[["pagesize",8]]]],["bool",0]],[[["page",3,[["",26,[["partialeq",8],["pagesize",8]]]]],["page",3]],["bool",0]],[[["pagerange",3,[["",26,[["partialeq",8],["pagesize",8]]]]],["pagerange",3]],["bool",0]],[[["pagerangeinclusive",3,[["",26,[["partialeq",8],["pagesize",8]]]]],["pagerangeinclusive",3]],["bool",0]],[[["pagerange",3,[["pagesize",8]]]],["option",4]],[[["pagerangeinclusive",3,[["pagesize",8]]]],["option",4]],[[["page",3,[["size4kib",4]]]],["pagetableindex",3]],[[["page",3,[["notgiantpagesize",8]]]],["pagetableindex",3]],[[["page",3,[["pagesize",8]]]],["pagetableindex",3]],[[["page",3,[["pagesize",8]]]],["pagetableindex",3]],[[["page",3,[["pagesize",8]]],["pagetablelevel",4]],["pagetableindex",3]],[[["size4kib",4],["size4kib",4]],["option",4,[["ordering",4]]]],[[["size2mib",4],["size2mib",4]],["option",4,[["ordering",4]]]],[[["size1gib",4],["size1gib",4]],["option",4,[["ordering",4]]]],[[["page",3,[["",26,[["partialord",8],["pagesize",8]]]]],["page",3]],["option",4,[["ordering",4]]]],[[["page",3,[["pagesize",8]]],["page",3,[["pagesize",8]]]],["pagerange",3,[["pagesize",8]]]],[[["page",3,[["pagesize",8]]],["page",3,[["pagesize",8]]]],["pagerangeinclusive",3,[["pagesize",8]]]],[[["page",3,[["pagesize",8]]]],["u64",0]],null,null,[[["page",3,[["pagesize",8]]]],["virtaddr",3]],[[["page",3,[["pagesize",8]]],["page",3,[["pagesize",8]]]],["option",4,[["usize",0]]]],[[["page",3,[["pagesize",8]]],["u64",0]]],[[["page",3,[["pagesize",8]]],["page",3,[["pagesize",8]]]]],[[["page",3,[["pagesize",8]]],["u64",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["pagetableentry",3]],["physaddr",3]],[[],["pagetableflags",3]],[[["pagetableflags",3],["pagetableflags",3]],["pagetableflags",3]],[[["pagetableflags",3],["pagetableflags",3]]],[[["pagetableflags",3],["pagetableflags",3]],["pagetableflags",3]],[[["pagetableflags",3],["pagetableflags",3]]],[[["pagetableflags",3]],["u64",0]],[[["pagetableflags",3],["pagetableflags",3]],["pagetableflags",3]],[[["pagetableflags",3],["pagetableflags",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["frameerror",4]],["frameerror",4]],[[["pagetableentry",3]],["pagetableentry",3]],[[["pagetableflags",3]],["pagetableflags",3]],[[["pagetable",3]],["pagetable",3]],[[["pagetableindex",3]],["pagetableindex",3]],[[["pageoffset",3]],["pageoffset",3]],[[["pagetablelevel",4]],["pagetablelevel",4]],[[["pagetableflags",3],["pagetableflags",3]],["ordering",4]],[[["pagetableindex",3],["pagetableindex",3]],["ordering",4]],[[["pageoffset",3],["pageoffset",3]],["ordering",4]],[[["pagetablelevel",4],["pagetablelevel",4]],["ordering",4]],[[["pagetableflags",3]],["pagetableflags",3]],[[["pagetableflags",3],["pagetableflags",3]],["bool",0]],[[],["pagetable",3]],[[["pagetableflags",3],["pagetableflags",3]],["pagetableflags",3]],[[],["pagetableflags",3]],[[["pagetablelevel",4]],["u64",0]],[[["frameerror",4],["frameerror",4]],["bool",0]],[[["pagetableflags",3],["pagetableflags",3]],["bool",0]],[[["pagetableindex",3],["pagetableindex",3]],["bool",0]],[[["pageoffset",3],["pageoffset",3]],["bool",0]],[[["pagetablelevel",4],["pagetablelevel",4]],["bool",0]],[[["pagetableflags",3],["intoiterator",8]]],[[["pagetableentry",3]],["pagetableflags",3]],[[["frameerror",4],["formatter",3]],["result",6]],[[["pagetableentry",3],["formatter",3]],["result",6]],[[["pagetableflags",3],["formatter",3]],["result",6]],[[["pagetableflags",3],["formatter",3]],["result",6]],[[["pagetableflags",3],["formatter",3]],["result",6]],[[["pagetableflags",3],["formatter",3]],["result",6]],[[["pagetableflags",3],["formatter",3]],["result",6]],[[["pagetable",3],["formatter",3]],["result",6]],[[["pagetableindex",3],["formatter",3]],["result",6]],[[["pageoffset",3],["formatter",3]],["result",6]],[[["pagetablelevel",4],["formatter",3]],["result",6]],[[["pagetableentry",3]],["result",4,[["physframe",3],["frameerror",4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",0]],["option",4,[["pagetableflags",3]]]],[[["u64",0]],["pagetableflags",3]],[[["u64",0]],["pagetableflags",3]],[[["intoiterator",8]],["pagetableflags",3]],[[["pagetableflags",3],["",0]]],[[["pagetableindex",3],["",0]]],[[["pageoffset",3],["",0]]],[[["pagetablelevel",4],["",0]]],[[["pagetable",3],["usize",0]]],[[["pagetable",3],["pagetableindex",3]]],[[["pagetable",3],["usize",0]]],[[["pagetable",3],["pagetableindex",3]]],[[["pagetableflags",3],["pagetableflags",3]]],[[["pagetableflags",3],["pagetableflags",3]],["pagetableflags",3]],[[["pagetableflags",3],["pagetableflags",3]],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pagetableflags",3]],["bool",0]],[[["pagetableflags",3]],["bool",0]],[[["pagetableentry",3]],["bool",0]],[[["pagetable",3]],["iterator",8]],[[["pagetable",3]],["iterator",8]],[[["pagetableflags",3],["pagetableflags",3]],["bool",0]],[[["pagetableindex",3],["pagetableindex",3]],["bool",0]],[[["pageoffset",3],["pageoffset",3]],["bool",0]],[[],["pagetableentry",3]],[[],["pagetable",3]],[[["u16",0]],["pagetableindex",3]],[[["u16",0]],["pageoffset",3]],[[["u16",0]],["pagetableindex",3]],[[["u16",0]],["pageoffset",3]],[[["pagetablelevel",4]],["option",4,[["pagetablelevel",4]]]],[[["pagetableflags",3]],["pagetableflags",3]],[[["pagetableflags",3],["pagetableflags",3]],["option",4,[["ordering",4]]]],[[["pagetableindex",3],["pagetableindex",3]],["option",4,[["ordering",4]]]],[[["pageoffset",3],["pageoffset",3]],["option",4,[["ordering",4]]]],[[["pagetablelevel",4],["pagetablelevel",4]],["option",4,[["ordering",4]]]],[[["pagetableflags",3],["pagetableflags",3]]],[[["pagetableflags",3],["pagetableflags",3],["bool",0]]],[[["pagetableentry",3],["physaddr",3],["pagetableflags",3]]],[[["pagetableentry",3],["pagetableflags",3]]],[[["pagetableentry",3],["physframe",3],["pagetableflags",3]]],[[["pagetableentry",3]]],[[["pagetableflags",3],["pagetableflags",3]],["pagetableflags",3]],[[["pagetableflags",3],["pagetableflags",3]]],[[["pagetableflags",3],["pagetableflags",3]],["pagetableflags",3]],[[["pagetablelevel",4]],["u64",0]],[[["pagetableflags",3],["pagetableflags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["pagetableflags",3],["pagetableflags",3]],["pagetableflags",3]],[[["pagetable",3]]],null,null,[[["u16",0]]],[[["u16",0]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["taskstatesegment",3]],["taskstatesegment",3]],[[["taskstatesegment",3],["formatter",3]],["result",6]],[[]],null,[[]],null,[[],["taskstatesegment",3]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[4,"PrivilegeLevel"],[3,"VirtAddrNotValid"],[3,"PhysAddrNotValid"],[3,"VirtAddr"],[3,"PhysAddr"],[3,"PortGeneric"],[3,"ReadOnlyAccess"],[3,"WriteOnlyAccess"],[3,"ReadWriteAccess"],[3,"RdRand"],[4,"InvPicdCommand"],[3,"Pcid"],[13,"Address"],[13,"Single"],[3,"Cr0Flags"],[3,"Cr4Flags"],[3,"Cr3Flags"],[3,"Cr0"],[3,"Cr2"],[3,"Cr3"],[3,"Cr4"],[3,"Dr6Flags"],[4,"BreakpointCondition"],[4,"DebugAddressRegisterNumber"],[3,"Dr7Flags"],[4,"BreakpointSize"],[8,"DebugAddressRegister"],[3,"Dr7Value"],[3,"Dr0"],[3,"Dr1"],[3,"Dr2"],[3,"Dr3"],[3,"Dr6"],[3,"Dr7"],[3,"EferFlags"],[3,"CetFlags"],[3,"Efer"],[3,"FsBase"],[3,"GsBase"],[3,"KernelGsBase"],[3,"Star"],[3,"LStar"],[3,"SFMask"],[3,"UCet"],[3,"SCet"],[3,"Msr"],[3,"MxCsr"],[3,"RFlags"],[3,"SegmentSelector"],[8,"Segment64"],[3,"CS"],[3,"SS"],[3,"DS"],[3,"ES"],[3,"FS"],[3,"GS"],[8,"Segment"],[3,"XCr0Flags"],[3,"XCr0"],[3,"DescriptorTablePointer"],[3,"DescriptorFlags"],[4,"Descriptor"],[3,"GlobalDescriptorTable"],[13,"UserSegment"],[13,"SystemSegment"],[4,"ExceptionVector"],[3,"PageFaultErrorCode"],[4,"DescriptorTable"],[3,"InterruptDescriptorTable"],[3,"InterruptStackFrame"],[3,"Entry"],[3,"EntryOptions"],[3,"InterruptStackFrameValue"],[3,"SelectorErrorCode"],[8,"FrameAllocator"],[8,"FrameDeallocator"],[3,"PhysFrame"],[3,"PhysFrameRange"],[3,"PhysFrameRangeInclusive"],[4,"MapToError"],[4,"TranslateResult"],[4,"UnmapError"],[4,"TranslateError"],[4,"InvalidPageTable"],[4,"FlagUpdateError"],[4,"MappedFrame"],[3,"MappedPageTable"],[3,"OffsetPageTable"],[3,"RecursivePageTable"],[3,"MapperFlush"],[3,"MapperFlushAll"],[8,"CleanUp"],[8,"PageTableFrameMapping"],[8,"Mapper"],[8,"Translate"],[13,"PageAlreadyMapped"],[13,"Size4KiB"],[13,"Size2MiB"],[13,"Size1GiB"],[13,"InvalidFrameAddress"],[13,"InvalidFrameAddress"],[13,"Mapped"],[13,"InvalidFrameAddress"],[8,"PageSize"],[3,"Page"],[3,"PageRange"],[4,"Size4KiB"],[4,"Size2MiB"],[4,"Size1GiB"],[3,"PageRangeInclusive"],[3,"AddressNotAligned"],[3,"PageTableFlags"],[4,"PageTableLevel"],[4,"FrameError"],[3,"PageTableEntry"],[3,"PageTable"],[3,"PageTableIndex"],[3,"PageOffset"],[8,"PortRead"],[8,"PortWrite"],[3,"TaskStateSegment"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
