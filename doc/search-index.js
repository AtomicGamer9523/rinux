var searchIndex = JSON.parse('{\
"enderpearl":{"doc":"","t":[3,3,3,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Command","EnderPearl","Operation","_customTokenize","_useCustomRunner","_useCustomRunner","_useCustomRunner","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","command","fmt","fmt","fmt","from","from","from","into","into","into","name","new","parse","run","run","run","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["enderpearl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Command Structure","Enderpearl structure includes a vector of Operations","Operation Structure includes a name and a vector of …","Uses the enderpearl tokenizer to tokenize content","Uses a custom runner to run the command","Custom run function for the operation","Uses custom runner to run enderpearl (still uses default …","","","","","","","","","","","","","The command to be run","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new plain Enderpearl Structure","parses two string using the built-in parser","Default run function <strong>WARNING</strong> not yet implemented","Default run function","Runs using default runner","","","","","","","","","","","",""],"i":[0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,1,2,3,1,2,3,1,2,3,2,3,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3],"f":[null,null,null,[[["string",3]],["vec",3]],[[["runablefunc",6]]],[[["operation",3],["bool",0],["fnmut",8]]],[[["enderpearl",3],["fnmut",8]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["command",3]],["command",3]],[[["operation",3]],["operation",3]],[[["enderpearl",3]],["enderpearl",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[["command",3],["formatter",3]],["result",6]],[[["operation",3],["formatter",3]],["result",6]],[[["enderpearl",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["bool",0]],["enderpearl",3]],[[["enderpearl",3],["string",3],["string",3]],["enderpearl",3]],[[["command",3],["bool",0]]],[[["operation",3],["bool",0]]],[[["enderpearl",3],["string",3]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"Command"],[3,"Operation"],[3,"EnderPearl"]]},\
"rinux":{"doc":"","t":[5,5],"n":["kernel_main","main"],"q":["rinux",""],"d":["",""],"i":[0,0],"f":[[[["bootinfo",3]],["never",0]],[[],["future",8]]],"p":[]},\
"rinuxcore":{"doc":"Rinux","t":[3,4,13,13,13,4,13,8,11,11,11,11,11,11,11,11,11,11,0,11,5,11,11,11,11,11,11,5,5,11,11,11,14,12,12,14,14,14,10,14,14,5,0,5,5,11,11,11,11,11,11,11,11,11,11,11,11,12,3,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,12,3,11,11,0,11,11,0,11,0,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,5,11,11,11,5,11,11,11,3,11,11,11,11,11,11,11,11,11,11],"n":["BootInfo","ConfigType","Custom","Failed","File","QemuExitCode","Success","Testable","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","conf","eq","exit_qemu","fmt","fmt","fmt","from","from","from","hlt_loop","init","into","into","into","kernel","memory_map","physical_memory_offset","print","print_err","println","run","serial_print","serial_println","set_config_type","task","test_panic_handler","test_runner","tls_template","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","Config","ConfigType","File","UserDefined","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cnst","default","fmt","from","from","into","into","new","project_name","project_version","quiet_boot","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","0","Task","borrow","borrow_mut","executor","from","into","keyboard","new","simple_executor","try_from","try_into","type_id","Executor","borrow","borrow_mut","from","into","new","run","spawn","try_from","try_into","type_id","ScancodeStream","borrow","borrow_mut","from","init","into","new","poll_next","print_keypresses","try_from","try_into","type_id","SimpleExecutor","borrow","borrow_mut","from","into","new","run","spawn","try_from","try_into","type_id"],"q":["rinuxcore","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rinuxcore::ConfigType","rinuxcore::conf","","","","","","","","","","","","","","","","","","","","","","","","","","","","rinuxcore::conf::ConfigType","rinuxcore::task","","","","","","","","","","","","rinuxcore::task::executor","","","","","","","","","","","rinuxcore::task::keyboard","","","","","","","","","","","","rinuxcore::task::simple_executor","","","","","","","","","",""],"d":["This structure represents the information that the …","Enum for Configuration Data Specification","","","","Enum For Qemu Exit codes, sometimes useful","","Useful for testing","","","","","","","","","","","","","Quits Qemu using certain exit code","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Loop used to just do nothing","Initializes the std3 of Rinux","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","A map of the physical memory regions of the underlying …","The offset into the virtual address space where the …","","","","","","","Used for setting source for rinux to get it’s config from","","It’s in the name","Runs Tests","Returns information about the thread local storage segment …","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,1,2,1,0,2,0,3,1,2,3,1,2,1,2,1,2,0,2,0,3,1,2,3,1,2,0,0,3,1,2,0,3,3,0,0,0,4,0,0,0,0,0,0,3,1,2,3,1,2,3,1,2,3,1,2,5,0,0,6,6,6,7,6,7,7,7,7,7,7,6,7,6,7,7,7,7,7,7,6,7,6,7,6,7,8,0,9,9,0,9,9,0,9,0,9,9,9,0,10,10,10,10,10,10,10,10,10,10,0,11,11,11,0,11,11,11,0,11,11,11,0,12,12,12,12,12,12,12,12,12,12],"f":[null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["configtype",4]],["configtype",4]],[[["qemuexitcode",4]],["qemuexitcode",4]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[["qemuexitcode",4],["qemuexitcode",4]],["bool",0]],[[["qemuexitcode",4]]],[[["bootinfo",3],["formatter",3]],["result",4,[["error",3]]]],[[["configtype",4],["formatter",3]],["result",6]],[[["qemuexitcode",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["never",0]],[[["bootinfo",3]]],[[]],[[]],[[]],null,null,null,null,null,null,[[["",0]]],null,null,[[["configtype",4]]],null,[[["panicinfo",3]],["never",0]],[[]],[[["bootinfo",3]],["option",4,[["tlstemplate",3]]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["config",3]],["config",3]],[[["",0],["",0]]],[[],["config",3]],[[],["config",3]],[[["config",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["str",0],["str",0],["bool",0]],["config",3]],null,null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[]],[[]],null,[[["future",8]],["task",3]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[],["executor",3]],[[["executor",3]],["never",0]],[[["executor",3],["task",3]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[],["future",8]],[[]],[[],["scancodestream",3]],[[["pin",3,[["scancodestream",3]]],["context",3]],["poll",4,[["option",4,[["u8",0]]]]]],[[],["future",8]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[],["simpleexecutor",3]],[[["simpleexecutor",3]]],[[["simpleexecutor",3],["task",3]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[4,"ConfigType"],[4,"QemuExitCode"],[3,"BootInfo"],[8,"Testable"],[13,"Custom"],[4,"ConfigType"],[3,"Config"],[13,"UserDefined"],[3,"Task"],[3,"Executor"],[3,"ScancodeStream"],[3,"SimpleExecutor"]]},\
"vga_buffer":{"doc":"","t":[13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,8,3,13,11,11,11,11,11,11,11,0,11,11,11,11,11,14,14,14,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,4,3,8,13,8,14,3,3,3,3,3,8,3,3,13,8,8,8,8,6,13,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,10,11,11],"n":["Black","Blue","Brown","Color","Cyan","DarkGray","Green","LightBlue","LightCyan","LightGray","LightGreen","LightRed","Magenta","Pink","Red","White","Write","Writer","Yellow","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","fmt","from","from","into","into","print","print_err","print_info","print_ok","println","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write_byte","write_char","write_char","write_char","write_fmt","write_fmt","write_fmt","write_str","write_str","Alignment","Arguments","Binary","Center","Debug","Debug","DebugList","DebugMap","DebugSet","DebugStruct","DebugTuple","Display","Error","Formatter","Left","LowerExp","LowerHex","Octal","Pointer","Result","Right","UpperExp","UpperHex","Write","align","alternate","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","debug_list","debug_map","debug_set","debug_struct","debug_tuple","default","entries","entries","entries","entry","entry","entry","eq","eq","field","field","fill","finish","finish","finish","finish","finish","finish_non_exhaustive","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","hash","into","into","into","into","into","into","into","into","into","key","pad","pad_integral","partial_cmp","precision","sign_aware_zero_pad","sign_minus","sign_plus","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","width","write","write_char","write_char","write_fmt","write_fmt","write_fmt","write_str","write_str","write_str"],"q":["vga_buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","vga_buffer::fmt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","A trait for writing or formatting into Unicode-accepting …","","","","","","","","","","Utilities for formatting and printing <code>String</code>s.","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Writes a <code>char</code> into this writer, returning whether the …","Writes a <code>char</code> into this writer, returning whether the …","Writes a <code>char</code> into this writer, returning whether the …","Glue for usage of the <code>write!</code> macro with implementors of …","Glue for usage of the <code>write!</code> macro with implementors of …","Glue for usage of the <code>write!</code> macro with implementors of …","Writes a string slice into this writer, returning whether …","","Possible alignments returned by <code>Formatter::align</code>","This structure represents a safely precompiled version of …","<code>b</code> formatting.","Indication that contents should be center-aligned.","<code>?</code> formatting.","Derive macro generating an impl of the trait <code>Debug</code>.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","Format trait for an empty format, <code>{}</code>.","The error type which is returned from formatting a message …","Configuration for formatting.","Indication that contents should be left-aligned.","<code>e</code> formatting.","<code>x</code> formatting.","<code>o</code> formatting.","<code>p</code> formatting.","The type returned by formatter methods.","Indication that contents should be right-aligned.","<code>E</code> formatting.","<code>X</code> formatting.","A trait for writing or formatting into Unicode-accepting …","Flag indicating what form of alignment was requested.","Determines if the <code>#</code> flag was specified.","Get the formatted string, if it has no arguments to be …","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>DebugList</code> builder designed to assist with …","Creates a <code>DebugMap</code> builder designed to assist with …","Creates a <code>DebugSet</code> builder designed to assist with …","Creates a <code>DebugStruct</code> builder designed to assist with …","Creates a <code>DebugTuple</code> builder designed to assist with …","","Adds the contents of an iterator of entries to the set …","Adds the contents of an iterator of entries to the list …","Adds the contents of an iterator of entries to the map …","Adds a new entry to the set output.","Adds a new entry to the list output.","Adds a new entry to the map output.","","","Adds a new field to the generated struct output.","Adds a new field to the generated tuple struct output.","Character used as ‘fill’ whenever there is alignment.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Marks the struct as non-exhaustive, indicating to the …","Flags for formatting","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","","","","","","The <code>format</code> function takes an <code>Arguments</code> struct and returns …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Adds the key part of a new entry to the map output.","This function takes a string slice and emits it to the …","Performs the correct padding for an integer which has …","","Optionally specified precision for numeric types. …","Determines if the <code>0</code> flag was specified.","Determines if the <code>-</code> flag was specified.","Determines if the <code>+</code> flag was specified.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds the value part of a new entry to the map output.","Optionally specified integer width that the output should …","The <code>write</code> function takes an output stream, and an <code>Arguments</code>…","Writes a <code>char</code> into this writer, returning whether the …","","Glue for usage of the <code>write!</code> macro with implementors of …","Writes some formatted information into this instance.","","Writes a string slice into this writer, returning whether …","Writes some data to the underlying buffer contained within …",""],"i":[1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,2,1,2,1,1,1,1,0,1,2,1,2,1,0,0,0,0,0,1,2,1,2,1,2,1,2,3,3,3,3,3,3,3,2,0,0,0,4,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,4,0,0,0,5,5,6,7,8,9,10,11,5,4,12,6,7,8,9,10,11,5,4,12,6,4,12,6,4,12,6,12,5,5,5,5,5,12,9,10,11,9,10,11,4,12,7,8,5,7,8,9,10,11,7,5,13,14,15,16,17,18,19,20,21,4,12,12,6,6,0,7,8,9,10,11,5,4,12,6,12,7,8,9,10,11,5,4,12,6,11,5,5,12,5,5,5,5,4,12,6,12,6,7,8,9,10,11,5,4,12,6,7,8,9,10,11,5,4,12,6,7,8,9,10,11,5,4,12,6,11,5,0,3,5,3,5,5,3,5,5],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["color",4]],["color",4]],[[["",0],["",0]]],[[["color",4],["color",4]],["bool",0]],null,[[["color",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["writer",3],["u8",0]]],[[["",0],["char",0]],["result",4,[["error",3]]]],[[["",0],["char",0]],["result",4,[["error",3]]]],[[["",0],["char",0]],["result",4,[["error",3]]]],[[["",0],["arguments",3]],["result",4,[["error",3]]]],[[["",0],["arguments",3]],["result",4,[["error",3]]]],[[["",0],["arguments",3]],["result",4,[["error",3]]]],[[["",0],["str",0]],["result",4,[["error",3]]]],[[["writer",3],["str",0]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["formatter",3]],["option",4,[["alignment",4]]]],[[["formatter",3]],["bool",0]],[[["arguments",3]],["option",4,[["str",0]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["alignment",4]],["alignment",4]],[[["error",3]],["error",3]],[[["arguments",3]],["arguments",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["error",3],["error",3]],["ordering",4]],[[["formatter",3]],["debuglist",3]],[[["formatter",3]],["debugmap",3]],[[["formatter",3]],["debugset",3]],[[["formatter",3],["str",0]],["debugstruct",3]],[[["formatter",3],["str",0]],["debugtuple",3]],[[],["error",3]],[[["debugset",3]],["debugset",3]],[[["debuglist",3]],["debuglist",3]],[[["debugmap",3]],["debugmap",3]],[[["debugset",3],["debug",8]],["debugset",3]],[[["debuglist",3],["debug",8]],["debuglist",3]],[[["debugmap",3],["debug",8],["debug",8]],["debugmap",3]],[[["alignment",4],["alignment",4]],["bool",0]],[[["error",3],["error",3]],["bool",0]],[[["debugstruct",3],["str",0],["debug",8]],["debugstruct",3]],[[["debugtuple",3],["debug",8]],["debugtuple",3]],[[["formatter",3]],["char",0]],[[["debugstruct",3]],["result",4,[["error",3]]]],[[["debugtuple",3]],["result",4,[["error",3]]]],[[["debugset",3]],["result",4,[["error",3]]]],[[["debuglist",3]],["result",4,[["error",3]]]],[[["debugmap",3]],["result",4,[["error",3]]]],[[["debugstruct",3]],["result",4,[["error",3]]]],[[["formatter",3]],["u32",0]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["alignment",4],["formatter",3]],["result",4,[["error",3]]]],[[["error",3],["formatter",3]],["result",4,[["error",3]]]],[[["error",3],["formatter",3]],["result",4,[["error",3]]]],[[["arguments",3],["formatter",3]],["result",4,[["error",3]]]],[[["arguments",3],["formatter",3]],["result",4,[["error",3]]]],[[["arguments",3]],["string",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["error",3],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["debugmap",3],["debug",8]],["debugmap",3]],[[["formatter",3],["str",0]],["result",4,[["error",3]]]],[[["formatter",3],["bool",0],["str",0],["str",0]],["result",4,[["error",3]]]],[[["error",3],["error",3]],["option",4,[["ordering",4]]]],[[["formatter",3]],["option",4,[["usize",0]]]],[[["formatter",3]],["bool",0]],[[["formatter",3]],["bool",0]],[[["formatter",3]],["bool",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["debugmap",3],["debug",8]],["debugmap",3]],[[["formatter",3]],["option",4,[["usize",0]]]],[[["write",8],["arguments",3]],["result",4,[["error",3]]]],[[["",0],["char",0]],["result",4,[["error",3]]]],[[["formatter",3],["char",0]],["result",4,[["error",3]]]],[[["",0],["arguments",3]],["result",4,[["error",3]]]],[[["formatter",3],["arguments",3]],["result",4,[["error",3]]]],[[["formatter",3],["arguments",3]],["result",4,[["error",3]]]],[[["",0],["str",0]],["result",4,[["error",3]]]],[[["formatter",3],["str",0]],["result",4,[["error",3]]]],[[["formatter",3],["str",0]],["result",4,[["error",3]]]]],"p":[[4,"Color"],[3,"Writer"],[8,"Write"],[4,"Alignment"],[3,"Formatter"],[3,"Arguments"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[8,"Debug"],[8,"Display"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"]],"a":{"{:?}":[57],"{}":[64]}}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
